var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { TextDecoder, TextEncoder } from 'text-encoding';
import { Api, JsonRpc } from 'eosjs';
import { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig';
import fetch from 'isomorphic-fetch';
import ono from "@jsdevtools/ono";
import btoa from 'btoa';
import atob from 'atob';
import unescape from 'core-js-pure/stable/unescape';
import escape from 'core-js-pure/stable/escape';
import EosioContract from './contracts/eosio';
import CoreContract from './contracts/core';
import PartnersContract from './contracts/partners';
import P2PContract from './contracts/p2p';
import NftContract from './contracts/nft';
import ReadApi from './readApi';
import { NotImplementedError } from './errors';
import BaseCrypt from "./baseCrypt";
import Wallet from "./wallet";
import Explorer from "./explorer";
const JsSignatureProviderMaker = ((wif) => Promise.resolve(new JsSignatureProvider([wif])));
class Chain {
    constructor(chainConfig, tableCodeConfig, personalData, authKeySearchCallback, signatureProviderMaker, chainCrypt, textDecoder, textEncoder) {
        this.name = chainConfig.name;
        this.tableCodeConfig = Object.assign(Object.assign({}, tableCodeConfig), (chainConfig.tableCodeConfigOverride || {}));
        this.readApi = new ReadApi(this.name, chainConfig.rpcEndpoints, chainConfig.balancingMode);
        this.explorer = new Explorer(chainConfig.explorerApiUrl);
        this.rpcByEndpoint = {};
        this.authKeyType = chainConfig.authKeyType || 'plain-auth-key';
        this.authKeySearchCallback = authKeySearchCallback;
        this.signatureProviderMaker = signatureProviderMaker || JsSignatureProviderMaker;
        this.chainCrypt = chainCrypt || new BaseCrypt();
        this.textDecoder = textDecoder;
        this.textEncoder = textEncoder;
        this.coreSymbol = chainConfig.coreSymbol;
        this.personalData = personalData;
        this.eosioContract = this.applyContract(EosioContract);
        this.coreContract = this.applyContract(CoreContract);
        this.partnersContract = this.applyContract(PartnersContract);
        this.p2pContract = this.applyContract(P2PContract);
        this.nftContract = this.applyContract(NftContract);
        this.wallets = (chainConfig.wallets || []).map(walletConfig => new Wallet(walletConfig, this.readApi));
    }
    get walletsSymbols() {
        return this.wallets.map(wallet => wallet.symbol);
    }
    getWalletBySymbol(symbol) {
        return this.wallets.find(wallet => wallet.symbol === symbol);
    }
    applyContract(contract) {
        return new contract(this.readApi, this.tableCodeConfig);
    }
    getCachedRpc() {
        const endpoint = this.readApi.getEndpoint();
        if (!this.rpcByEndpoint[endpoint]) {
            this.rpcByEndpoint[endpoint] = new JsonRpc(endpoint, { fetch });
        }
        return this.rpcByEndpoint[endpoint];
    }
    getEosInstanceBySignatureProvider(signatureProvider) {
        const rpc = this.getCachedRpc();
        return new Api({
            rpc,
            signatureProvider,
            // @ts-ignore
            textDecoder: new (this.textDecoder || TextDecoder)(),
            textEncoder: new (this.textEncoder || TextEncoder)(),
        });
    }
    /**
     * @deprecated since version 1.0.2
     */
    getEosPassInstance(wif) {
        const signatureProvider = new JsSignatureProvider([wif]);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    makeEosInstance(authKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const signatureProvider = yield this.signatureProviderMaker(authKey);
            return this.getEosInstanceBySignatureProvider(signatureProvider);
        });
    }
    getAuthKey(authKeyQuery, authKeyType) {
        const localAuthKeyType = authKeyType || this.authKeyType;
        if (localAuthKeyType === 'plain-auth-key') {
            return authKeyQuery;
        }
        if (localAuthKeyType === 'auth-key-search-callback') {
            if (!this.authKeySearchCallback) {
                throw ono(new Error('For authKeyType=wif-search-callback wifSearchCallback need to define'));
            }
            return this.authKeySearchCallback(authKeyQuery);
        }
        throw ono(new NotImplementedError('Not implemented authKeyType'));
    }
    transactByAuthKey(authKey, transaction, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const eos = yield this.makeEosInstance(authKey);
            return eos.transact(transaction, config);
        });
    }
    transact(authKeyQuery, transaction, config, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const authKey = yield this.getAuthKey(authKeyQuery, authKeyType);
            if (!authKey) {
                throw ono(new Error('authKey cannot be empty'));
            }
            return this.transactByAuthKey(authKey, transaction, config);
        });
    }
    encryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const authKey = yield this.getAuthKey(authKeyQuery, authKeyType);
            if (!authKey) {
                throw ono(new Error('authKey cannot be empty'));
            }
            const preparedMessage = btoa(unescape(encodeURIComponent(message)));
            return this.chainCrypt.encrypt(authKey, publicKey, preparedMessage, memo);
        });
    }
    decryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const authKey = yield this.getAuthKey(authKeyQuery, authKeyType);
            if (!authKey) {
                throw ono(new Error('authKey cannot be empty'));
            }
            const decryptedMessage = yield this.chainCrypt.decrypt(authKey, publicKey, message, memo);
            return decodeURIComponent(escape(atob(decryptedMessage)));
        });
    }
    makeValueAsStr(value) {
        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value === null || value === undefined) {
            return String(value);
        }
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                return value.map(item => this.makeValueAsStr(item)).join(',');
            }
            const keys = Object.keys(value).sort();
            return keys.map(key => `${key}=${this.makeValueAsStr(value[key])}`).join('&');
        }
        throw ono(new Error('Unsupported value type'));
    }
    objToStableMessage(dict) {
        return this.makeValueAsStr(dict);
    }
    btoaEscape(str) {
        return btoa(unescape(encodeURIComponent(str)));
    }
    signMessage(authKeyQuery, publicKey, message, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const authKey = yield this.getAuthKey(authKeyQuery, authKeyType);
            if (!authKey) {
                throw ono(new Error('authKey cannot be empty'));
            }
            const preparedMessage = this.btoaEscape(message);
            return this.chainCrypt.sign(authKey, preparedMessage);
        });
    }
    verifyMessage(publicKey, message, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedMessage = this.btoaEscape(message);
            return this.chainCrypt.verify(publicKey, signature, preparedMessage);
        });
    }
    signObject(authKeyQuery, publicKey, dict, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = this.objToStableMessage(dict);
            return this.signMessage(authKeyQuery, publicKey, message, authKeyType);
        });
    }
    verifyObject(publicKey, dict, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = this.objToStableMessage(dict);
            return this.verifyMessage(publicKey, message, signature);
        });
    }
    sendPersonalData(authKeyQuery, senderAccountName, recipientAccountName, data, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const senderPub = yield this.readApi.getPermissionKeyByName(senderAccountName, "active");
            const recipientPub = yield this.readApi.getPermissionKeyByName(recipientAccountName, "active");
            if (!senderPub || !recipientPub) {
                throw ono(new Error('senderPub or recipientPub cannot be empty'));
            }
            const jsonMessage = JSON.stringify(data);
            const encryptedToSender = yield this.encryptMessage(authKeyQuery, senderPub, jsonMessage, undefined, authKeyType);
            const encryptedToRecipient = yield this.encryptMessage(authKeyQuery, recipientPub, jsonMessage, undefined, authKeyType);
            const dataBundle = {
                senderPub,
                recipientPub,
                senderData: encryptedToSender,
                recipientData: encryptedToRecipient,
            };
            const signature = yield this.signObject(authKeyQuery, senderPub, dataBundle, authKeyType);
            return this.personalData.sendPersonalData(dataBundle, signature);
        });
    }
    getPersonalAsRecipient(authKeyQuery, recipientAccountName, ids, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const recipientPub = yield this.readApi.getPermissionKeyByName(recipientAccountName, "active");
            if (!recipientPub) {
                throw ono(new Error('recipientPub cannot be empty'));
            }
            const dataBundle = {
                recipientPub,
                ids,
            };
            const signature = yield this.signObject(authKeyQuery, recipientPub, dataBundle, authKeyType);
            const result = yield this.personalData.getPersonalDataAsRecipient(dataBundle, signature);
            return JSON.parse(result);
        });
    }
    getPersonalAsSender(authKeyQuery, senderAccountName, ids, authKeyType) {
        return __awaiter(this, void 0, void 0, function* () {
            const senderPub = yield this.readApi.getPermissionKeyByName(senderAccountName, "active");
            if (!senderPub) {
                throw ono(new Error('senderPub cannot be empty'));
            }
            const dataBundle = {
                senderPub,
                ids,
            };
            const signature = yield this.signObject(authKeyQuery, senderPub, dataBundle, authKeyType);
            const result = yield this.personalData.getPersonalDataAsSender(dataBundle, signature);
            return JSON.parse(result);
        });
    }
}
export default Chain;
//# sourceMappingURL=data:application/json;base64,