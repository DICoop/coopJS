var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export const encode_b58 = (hex_number) => {
    const base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'; // Преобразовано в строку для удобства
    let num = BigInt(`0x${hex_number}`);
    const fifty8 = BigInt(58);
    let remainder;
    let b58_encoded_buffer = '';
    while (num > BigInt(0)) {
        remainder = num % fifty8;
        b58_encoded_buffer = base58[Number(remainder)] + b58_encoded_buffer; // Преобразование BigInt в number здесь допустимо, потому что remainder всегда будет меньше 58
        num = num / fifty8;
    }
    while (hex_number.match(/^00/)) {
        b58_encoded_buffer = '1' + b58_encoded_buffer;
        hex_number = hex_number.substring(2);
    }
    return b58_encoded_buffer;
};
export const sha256 = (hex_str) => __awaiter(void 0, void 0, void 0, function* () {
    const typedArray = new Uint8Array(hex_str.match(/[\da-f]{2}/gi).map((h) => parseInt(h, 16)));
    const hashBuffer = yield crypto.subtle.digest('SHA-256', typedArray);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map((bytes) => bytes.toString(16).padStart(2, '0')).join('');
    return hashHex;
});
export const ab2b = (ab) => {
    const buffer = [];
    const view = new Uint8Array(ab);
    for (let i = 0; i < ab.byteLength; i++)
        buffer[i] = view[i];
    return buffer;
};
export const to_hex = (bs) => {
    const encoded = [];
    for (let i = 0; i < bs.length; i++) {
        encoded.push('0123456789abcdef'[(bs[i] >> 4) & 15]);
        encoded.push('0123456789abcdef'[bs[i] & 15]);
    }
    return encoded.join('');
};
export const base64url_decode = (value) => {
    const m = value.length % 4;
    return Uint8Array.from(atob(value.replace(/-/g, '+')
        .replace(/_/g, '/')
        .padEnd(value.length + (m === 0 ? 0 : 4 - m), '=')), (c) => c.charCodeAt(0)).buffer;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdHMvc3JjL2F1dGgva2V5cy9jcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsVUFBa0IsRUFBVSxFQUFFO0lBQ3ZELE1BQU0sTUFBTSxHQUFHLDREQUE0RCxDQUFDLENBQUMsc0NBQXNDO0lBQ25ILElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDcEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLElBQUksU0FBaUIsQ0FBQztJQUN0QixJQUFJLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztJQUU1QixPQUFPLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDdEIsU0FBUyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7UUFDekIsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLENBQUMsOEZBQThGO1FBQ25LLEdBQUcsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0tBQ3BCO0lBRUQsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzlCLGtCQUFrQixHQUFHLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztRQUM5QyxVQUFVLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0QztJQUVELE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQU8sT0FBZSxFQUFtQixFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFlLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRyxNQUFNLFVBQVUsR0FBZ0IsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbEYsTUFBTSxTQUFTLEdBQWEsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sT0FBTyxHQUFXLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvRixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUEsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEVBQWUsRUFBWSxFQUFFO0lBQ2hELE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUM1QixNQUFNLElBQUksR0FBZSxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM1QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUU7UUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEVBQVksRUFBVSxFQUFFO0lBQzdDLE1BQU0sT0FBTyxHQUFhLEVBQUUsQ0FBQztJQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEQsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQWEsRUFBZSxFQUFFO0lBQzdELE1BQU0sQ0FBQyxHQUFXLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztTQUNyQixPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztTQUNsQixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUNyRCxFQUFFLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzVDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBlbmNvZGVfYjU4ID0gKGhleF9udW1iZXI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGJhc2U1OCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6JzsgLy8g0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90L4g0LIg0YHRgtGA0L7QutGDINC00LvRjyDRg9C00L7QsdGB0YLQstCwXG4gIGxldCBudW0gPSBCaWdJbnQoYDB4JHtoZXhfbnVtYmVyfWApO1xuICBjb25zdCBmaWZ0eTggPSBCaWdJbnQoNTgpO1xuICBsZXQgcmVtYWluZGVyOiBCaWdJbnQ7XG4gIGxldCBiNThfZW5jb2RlZF9idWZmZXIgPSAnJztcbiAgXG4gIHdoaWxlIChudW0gPiBCaWdJbnQoMCkpIHtcbiAgICByZW1haW5kZXIgPSBudW0gJSBmaWZ0eTg7XG4gICAgYjU4X2VuY29kZWRfYnVmZmVyID0gYmFzZTU4W051bWJlcihyZW1haW5kZXIpXSArIGI1OF9lbmNvZGVkX2J1ZmZlcjsgLy8g0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSBCaWdJbnQg0LIgbnVtYmVyINC30LTQtdGB0Ywg0LTQvtC/0YPRgdGC0LjQvNC+LCDQv9C+0YLQvtC80YMg0YfRgtC+IHJlbWFpbmRlciDQstGB0LXQs9C00LAg0LHRg9C00LXRgiDQvNC10L3RjNGI0LUgNThcbiAgICBudW0gPSBudW0gLyBmaWZ0eTg7XG4gIH1cbiAgXG4gIHdoaWxlIChoZXhfbnVtYmVyLm1hdGNoKC9eMDAvKSkge1xuICAgIGI1OF9lbmNvZGVkX2J1ZmZlciA9ICcxJyArIGI1OF9lbmNvZGVkX2J1ZmZlcjtcbiAgICBoZXhfbnVtYmVyID0gaGV4X251bWJlci5zdWJzdHJpbmcoMik7XG4gIH1cblxuICByZXR1cm4gYjU4X2VuY29kZWRfYnVmZmVyO1xufVxuXG5leHBvcnQgY29uc3Qgc2hhMjU2ID0gYXN5bmMgKGhleF9zdHI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGNvbnN0IHR5cGVkQXJyYXk6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShoZXhfc3RyLm1hdGNoKC9bXFxkYS1mXXsyfS9naSkhLm1hcCgoaCkgPT4gcGFyc2VJbnQoaCwgMTYpKSk7XG4gIGNvbnN0IGhhc2hCdWZmZXI6IEFycmF5QnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCB0eXBlZEFycmF5KTtcbiAgY29uc3QgaGFzaEFycmF5OiBudW1iZXJbXSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpO1xuICBjb25zdCBoYXNoSGV4OiBzdHJpbmcgPSBoYXNoQXJyYXkubWFwKChieXRlcykgPT4gYnl0ZXMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xuICByZXR1cm4gaGFzaEhleDtcbn07XG5cbmV4cG9ydCBjb25zdCBhYjJiID0gKGFiOiBBcnJheUJ1ZmZlcik6IG51bWJlcltdID0+IHtcbiAgY29uc3QgYnVmZmVyOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCB2aWV3OiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFiLmJ5dGVMZW5ndGg7IGkrKykgYnVmZmVyW2ldID0gdmlld1tpXTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbmV4cG9ydCBjb25zdCB0b19oZXggPSAoYnM6IG51bWJlcltdKTogc3RyaW5nID0+IHtcbiAgY29uc3QgZW5jb2RlZDogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBicy5sZW5ndGg7IGkrKykge1xuICAgIGVuY29kZWQucHVzaCgnMDEyMzQ1Njc4OWFiY2RlZidbKGJzW2ldID4+IDQpICYgMTVdKTtcbiAgICBlbmNvZGVkLnB1c2goJzAxMjM0NTY3ODlhYmNkZWYnW2JzW2ldICYgMTVdKTtcbiAgfVxuICByZXR1cm4gZW5jb2RlZC5qb2luKCcnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBiYXNlNjR1cmxfZGVjb2RlID0gKHZhbHVlOiBzdHJpbmcpOiBBcnJheUJ1ZmZlciA9PiB7XG4gIGNvbnN0IG06IG51bWJlciA9IHZhbHVlLmxlbmd0aCAlIDQ7XG4gIHJldHVybiBVaW50OEFycmF5LmZyb20oYXRvYihcbiAgICB2YWx1ZS5yZXBsYWNlKC8tL2csICcrJylcbiAgICAgIC5yZXBsYWNlKC9fL2csICcvJylcbiAgICAgIC5wYWRFbmQodmFsdWUubGVuZ3RoICsgKG0gPT09IDAgPyAwIDogNCAtIG0pLCAnPScpXG4gICksIChjOiBzdHJpbmcpID0+IGMuY2hhckNvZGVBdCgwKSkuYnVmZmVyO1xufTtcbiJdfQ==