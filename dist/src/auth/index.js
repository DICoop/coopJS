import ono from '@jsdevtools/ono';
import { UniCoreMnemonicParseError, UniCoreWifParseError } from './errors';
import { generateMnemonic, isValidMnemonic, mnemonicToSeed } from './keys/bip39';
import { hdNodeToPublicKeyBuffer, hdNodeToPrivateKeyBuffer, hdToFirstHdNode, seedToHd } from './keys/hdkey';
import { hdPublicToEccPublicKey, hdPrivateToWif, isValidWif, privateKeyToPublic, wifToPrivateKey } from './keys/ecc';
import { generateAccountName } from "./utils";
export const makeHdNodeByMnemonic = async (mnemonic) => {
    if (!isValidMnemonic(mnemonic)) {
        throw ono(new UniCoreMnemonicParseError('Invalid mnemonic'));
    }
    const seed = await mnemonicToSeed(mnemonic);
    const hdBase = seedToHd(seed);
    const hdFirstNode = hdToFirstHdNode(hdBase);
    return hdFirstNode;
};
export const makePublicKeyByMnemonic = async (mnemonic) => {
    const hdFirstNode = await makeHdNodeByMnemonic(mnemonic);
    const hdPublicKeyBuffer = hdNodeToPublicKeyBuffer(hdFirstNode);
    return hdPublicToEccPublicKey(hdPublicKeyBuffer);
};
export const makeAccount = (username, mnemonic, wif, pub) => {
    return {
        name: username,
        mnemonic,
        wif,
        pub,
    };
};
export const makeAccountByMnemonic = async (username, mnemonic) => {
    const hdFirstNode = await makeHdNodeByMnemonic(mnemonic);
    const hdPublicKeyBuffer = hdNodeToPublicKeyBuffer(hdFirstNode);
    const hdPrivateKeyBuffer = hdNodeToPrivateKeyBuffer(hdFirstNode);
    return makeAccount(username, '', hdPrivateToWif(hdPrivateKeyBuffer), hdPublicToEccPublicKey(hdPublicKeyBuffer));
};
export const makeAccountByWif = async (username, wif) => {
    if (!isValidWif(wif)) {
        throw ono(new UniCoreWifParseError('Invalid wif'));
    }
    const publicKey = privateKeyToPublic(wifToPrivateKey(wif)).toLegacyString();
    return makeAccount(username, '', wif, publicKey);
};
export const generateAccount = async () => {
    const name = generateAccountName();
    const mnemonic = generateMnemonic();
    const seed = await mnemonicToSeed(mnemonic);
    const hdBase = seedToHd(seed);
    const hdFirstNode = hdToFirstHdNode(hdBase);
    const hdPublicKeyBuffer = hdNodeToPublicKeyBuffer(hdFirstNode);
    const hdPrivateKeyBuffer = hdNodeToPrivateKeyBuffer(hdFirstNode);
    return makeAccount(name, mnemonic, hdPrivateToWif(hdPrivateKeyBuffer), hdPublicToEccPublicKey(hdPublicKeyBuffer));
};
export const generateKeyPair = async () => {
    const { privateKey, publicKey } = await window.crypto.subtle.generateKey({
        name: "ECDSA",
        namedCurve: "P-256",
    }, true, ["sign", "verify"]);
    let private_jwk = await crypto.subtle.exportKey("jwk", privateKey);
    console.log("private_jwk: ", private_jwk);
    // let private_hex = to_hex(ab2b(base64url_decode(private_jwk.d)))
    // //SHA-256 hash with a 0x80 byte in front
    // let private_m256  = await sha256('80'+ private_hex )
    // //SHA-256 hash of the private key
    // let private_sha256  = await sha256(private_m256)
    // //first 4 bytes of the second SHA-256 hash
    // let private_four = private_sha256.substr(0,8);
    // //Base58 encode the binary data to get EOS private key
    // let private_wif = encode_b58('80'+ private_hex + private_four)
    // console.log({private_wif, publicKey})
    // return {private_wif, publicKey}
};
//# sourceMappingURL=data:application/json;base64,