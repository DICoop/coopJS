import axios from "axios";
class Explorer {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
    }
    getUrl(path) {
        return `${this.baseUrl}${path}`.replace(/\/\/+/g, '/');
    }
    post(path, data) {
        return axios.post(this.getUrl(path), data, { headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' } }).then(r => r.data);
    }
    get(path, params) {
        return axios.get(this.getUrl(path), {
            params: params || {},
            headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },
        }).then(r => r.data);
    }
    getHistoryActions(username, limit, skip) {
        return this.get('/v2/history/get_actions', {
            account: username,
            limit,
            skip,
            noBinary: 'true',
            simple: 'true',
        });
    }
}
export default Explorer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9yZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy9zcmMvYmxvY2tjaGFpbi9leHBsb3Jlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFHMUIsTUFBTSxRQUFRO0lBR1YsWUFBWSxPQUFlO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNmLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDMUQsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFZLEVBQUUsSUFBUztRQUN4QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBQyxPQUFPLEVBQUUsRUFBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNySixDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVksRUFBRSxNQUFZO1FBQzFCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sRUFBRSxNQUFNLElBQUksRUFBRTtZQUNwQixPQUFPLEVBQUUsRUFBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFDO1NBQ3BGLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQXFCLEVBQUUsS0FBYSxFQUFFLElBQVk7UUFDaEUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFO1lBQ3ZDLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLEtBQUs7WUFDTCxJQUFJO1lBQ0osUUFBUSxFQUFFLE1BQU07WUFDaEIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKO0FBRUQsZUFBZSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge0FjY291bnROYW1lfSBmcm9tIFwiLi4vZW9zL3R5cGVzXCI7XG5cbmNsYXNzIEV4cGxvcmVyIHtcbiAgICBiYXNlVXJsOiBzdHJpbmdcblxuICAgIGNvbnN0cnVjdG9yKGJhc2VVcmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsXG4gICAgfVxuXG4gICAgZ2V0VXJsKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmJhc2VVcmx9JHtwYXRofWAucmVwbGFjZSgvXFwvXFwvKy9nLCAnLycpXG4gICAgfVxuXG4gICAgcG9zdChwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgICAgICByZXR1cm4gYXhpb3MucG9zdCh0aGlzLmdldFVybChwYXRoKSwgZGF0YSwge2hlYWRlcnM6IHsnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfX0pLnRoZW4ociA9PiByLmRhdGEpXG4gICAgfVxuXG4gICAgZ2V0KHBhdGg6IHN0cmluZywgcGFyYW1zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBheGlvcy5nZXQodGhpcy5nZXRVcmwocGF0aCksIHtcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zIHx8IHt9LFxuICAgICAgICAgICAgaGVhZGVyczogeydBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LFxuICAgICAgICB9KS50aGVuKHIgPT4gci5kYXRhKVxuICAgIH1cblxuICAgIGdldEhpc3RvcnlBY3Rpb25zKHVzZXJuYW1lOiBBY2NvdW50TmFtZSwgbGltaXQ6IG51bWJlciwgc2tpcDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnL3YyL2hpc3RvcnkvZ2V0X2FjdGlvbnMnLCB7XG4gICAgICAgICAgICBhY2NvdW50OiB1c2VybmFtZSxcbiAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgc2tpcCxcbiAgICAgICAgICAgIG5vQmluYXJ5OiAndHJ1ZScsXG4gICAgICAgICAgICBzaW1wbGU6ICd0cnVlJyxcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGxvcmVyOyJdfQ==