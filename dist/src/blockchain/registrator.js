import ono from "@jsdevtools/ono";
import axios from "axios";
import { RegistratorIsNotConfigured } from "./errors";
class Registrator {
    constructor(config) {
        this.config = config;
    }
    setConfig(config) {
        this.config = config;
    }
    getUrl(path) {
        if (!this.config) {
            throw ono(new RegistratorIsNotConfigured(`registrator config is empty`));
        }
        return `${this.config.api}${path}`.replace(/\/\/+/g, '/').replace('http:/', 'http://').replace('https:/', 'https://');
    }
    post(path, data) {
        return axios.post(this.getUrl(path), data, { headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' } }).then(r => r.data);
    }
    get(path, params) {
        return axios.get(this.getUrl(path), {
            params: params || {},
            headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },
        }).then(r => r.data);
    }
    setAccount(username, pub, ownerpub, email, referer, callback, accountType) {
        return this.get('/set', {
            username,
            active_pub: pub,
            owner_pub: ownerpub,
            email,
            locale: 'ru',
            referer,
            callback,
            type: accountType,
            meta: {},
        });
    }
    checkEmail(email) {
        return this.get('/check', {
            email,
        });
    }
}
export default Registrator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy9zcmMvYmxvY2tjaGFpbi9yZWdpc3RyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQztBQUNsQyxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sVUFBVSxDQUFDO0FBR3BELE1BQU0sV0FBVztJQUdiLFlBQVksTUFBZ0M7UUFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDeEIsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUF5QjtRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtJQUN4QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVk7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLE1BQU0sR0FBRyxDQUFDLElBQUksMEJBQTBCLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFBO1NBQzNFO1FBRUQsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQ3pILENBQUM7SUFFRCxJQUFJLENBQUMsSUFBWSxFQUFFLElBQVM7UUFDeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUMsT0FBTyxFQUFFLEVBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDckosQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFZLEVBQUUsTUFBWTtRQUMxQixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxNQUFNLEVBQUUsTUFBTSxJQUFJLEVBQUU7WUFDcEIsT0FBTyxFQUFFLEVBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBQztTQUNwRixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3hCLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBcUIsRUFBRSxHQUFXLEVBQUUsUUFBZ0IsRUFBRSxLQUFhLEVBQUUsT0FBc0IsRUFBRSxRQUFnQixFQUFFLFdBQW1CO1FBQ3pJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDcEIsUUFBUTtZQUNSLFVBQVUsRUFBRSxHQUFHO1lBQ2YsU0FBUyxFQUFFLFFBQVE7WUFDbkIsS0FBSztZQUNMLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTztZQUNQLFFBQVE7WUFDUixJQUFJLEVBQUUsV0FBVztZQUNqQixJQUFJLEVBQUUsRUFBRTtTQUNYLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ3RCLEtBQUs7U0FDUixDQUFDLENBQUE7SUFDTixDQUFDO0NBQ0o7QUFFRCxlQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvbm8gZnJvbSBcIkBqc2RldnRvb2xzL29ub1wiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHtSZWdpc3RyYXRvckNvbmZpZ30gZnJvbSBcIi4vdHlwZXNcIlxuaW1wb3J0IHtSZWdpc3RyYXRvcklzTm90Q29uZmlndXJlZH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5pbXBvcnQge0FjY291bnROYW1lfSBmcm9tIFwiLi4vZW9zL3R5cGVzXCI7XG5cbmNsYXNzIFJlZ2lzdHJhdG9yIHtcbiAgICBjb25maWc6IFJlZ2lzdHJhdG9yQ29uZmlnIHwgbnVsbFxuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBSZWdpc3RyYXRvckNvbmZpZyB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWdcbiAgICB9XG5cbiAgICBzZXRDb25maWcoY29uZmlnOiBSZWdpc3RyYXRvckNvbmZpZykge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZ1xuICAgIH1cblxuICAgIGdldFVybChwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgICB0aHJvdyBvbm8obmV3IFJlZ2lzdHJhdG9ySXNOb3RDb25maWd1cmVkKGByZWdpc3RyYXRvciBjb25maWcgaXMgZW1wdHlgKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZy5hcGl9JHtwYXRofWAucmVwbGFjZSgvXFwvXFwvKy9nLCAnLycpLnJlcGxhY2UoJ2h0dHA6LycsICdodHRwOi8vJykucmVwbGFjZSgnaHR0cHM6LycsICdodHRwczovLycpXG4gICAgfVxuXG4gICAgcG9zdChwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgICAgICByZXR1cm4gYXhpb3MucG9zdCh0aGlzLmdldFVybChwYXRoKSwgZGF0YSwge2hlYWRlcnM6IHsnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfX0pLnRoZW4ociA9PiByLmRhdGEpXG4gICAgfVxuXG4gICAgZ2V0KHBhdGg6IHN0cmluZywgcGFyYW1zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBheGlvcy5nZXQodGhpcy5nZXRVcmwocGF0aCksIHtcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zIHx8IHt9LFxuICAgICAgICAgICAgaGVhZGVyczogeydBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LFxuICAgICAgICB9KS50aGVuKHIgPT4gci5kYXRhKVxuICAgIH1cblxuICAgIHNldEFjY291bnQodXNlcm5hbWU6IEFjY291bnROYW1lLCBwdWI6IHN0cmluZywgb3duZXJwdWI6IHN0cmluZywgZW1haWw6IHN0cmluZywgcmVmZXJlcjogc3RyaW5nIHwgbnVsbCwgY2FsbGJhY2s6IHN0cmluZywgYWNjb3VudFR5cGU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJy9zZXQnLCB7XG4gICAgICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgICAgIGFjdGl2ZV9wdWI6IHB1YixcbiAgICAgICAgICAgIG93bmVyX3B1Yjogb3duZXJwdWIsXG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGxvY2FsZTogJ3J1JyxcbiAgICAgICAgICAgIHJlZmVyZXIsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHR5cGU6IGFjY291bnRUeXBlLFxuICAgICAgICAgICAgbWV0YToge30sXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY2hlY2tFbWFpbChlbWFpbDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnL2NoZWNrJywge1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWdpc3RyYXRvcjsiXX0=