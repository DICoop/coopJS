import ono from '@jsdevtools/ono';
import Chain from './chain';
import { UnknownChainError, ChainsIsNotInitializedError } from './errors';
import Registrator from "./registrator";
import PersonalData from "./personalData";
class ChainsSingleton {
    constructor() {
        this.chainsByName = {};
        this.initialized = false;
        this.rootChain = 'unknown';
        this.registrator = new Registrator(null);
        this.personalData = new PersonalData(null);
    }
    init(config, authKeySearchCallback, signatureProviderMaker, chainCrypt, textDecoder, textEncoder) {
        if (this.initialized) {
            return;
        }
        this.textDecoder = textDecoder;
        this.textEncoder = textEncoder;
        if (config.personalData) {
            this.personalData.setConfig(config.personalData);
        }
        for (const chain of config.chains) {
            this.chainsByName[chain.name] = new Chain(chain, config.tableCodeConfig, this.personalData, authKeySearchCallback, signatureProviderMaker, chainCrypt, this.textDecoder, this.textEncoder);
        }
        this.rootChain = config.ual.rootChain;
        if (config.registrator) {
            this.registrator.setConfig(config.registrator);
        }
        this.initialized = true;
    }
    checkChainsIsInitialized() {
        if (!this.initialized) {
            throw ono(new ChainsIsNotInitializedError('Chains is not initialized'));
        }
    }
    getChainByName(name) {
        this.checkChainsIsInitialized();
        const chain = this.chainsByName[name];
        if (!chain) {
            throw ono(new UnknownChainError(`Chain "${name}" not found`));
        }
        return chain;
    }
    getRootChain() {
        return this.getChainByName(this.rootChain);
    }
}
export default ChainsSingleton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW5zU2luZ2xldG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdHMvc3JjL2Jsb2NrY2hhaW4vY2hhaW5zU2luZ2xldG9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLGlCQUFpQixDQUFBO0FBR2pDLE9BQU8sS0FBSyxNQUFNLFNBQVMsQ0FBQTtBQUUzQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDekUsT0FBTyxXQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBTTFDLE1BQU0sZUFBZTtJQVNuQjtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFBO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDeEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsSUFBSSxDQUNBLE1BQWMsRUFDZCxxQkFBNkMsRUFDN0Msc0JBQStDLEVBQy9DLFVBQXVCLEVBQ3ZCLFdBQWdDLEVBQ2hDLFdBQWdDO1FBRWxDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixPQUFNO1NBQ1A7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUU5QixJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQ2pEO1FBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxDQUNyQyxLQUFLLEVBQ0wsTUFBTSxDQUFDLGVBQWUsRUFDdEIsSUFBSSxDQUFDLFlBQVksRUFDakIscUJBQXFCLEVBQ3JCLHNCQUFzQixFQUN0QixVQUFVLEVBQ1YsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FDbkIsQ0FBQTtTQUNGO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1NBQy9DO1FBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUE7SUFDekIsQ0FBQztJQUVELHdCQUF3QjtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixNQUFNLEdBQUcsQ0FBQyxJQUFJLDJCQUEyQixDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtTQUN4RTtJQUNILENBQUM7SUFFRCxjQUFjLENBQUMsSUFBWTtRQUN6QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQTtRQUUvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXJDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixNQUFNLEdBQUcsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLFVBQVUsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFBO1NBQzlEO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDNUMsQ0FBQztDQUNGO0FBRUQsZUFBZSxlQUFlLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb25vIGZyb20gJ0Bqc2RldnRvb2xzL29ubydcbmltcG9ydCB7VGV4dERlY29kZXIsIFRleHRFbmNvZGVyfSBmcm9tICd0ZXh0LWVuY29kaW5nJ1xuXG5pbXBvcnQgQ2hhaW4gZnJvbSAnLi9jaGFpbidcbmltcG9ydCB7Q29uZmlnLCBTaWduYXR1cmVQcm92aWRlck1ha2VyLCBBdXRoS2V5U2VhcmNoQ2FsbGJhY2ssIENoYWluQ3J5cHR9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBVbmtub3duQ2hhaW5FcnJvciwgQ2hhaW5zSXNOb3RJbml0aWFsaXplZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnXG5pbXBvcnQgUmVnaXN0cmF0b3IgZnJvbSBcIi4vcmVnaXN0cmF0b3JcIjtcbmltcG9ydCBQZXJzb25hbERhdGEgZnJvbSBcIi4vcGVyc29uYWxEYXRhXCI7XG5cbmludGVyZmFjZSBDaGFpbnNCeU5hbWUge1xuICBba2V5OiBzdHJpbmddOiBDaGFpblxufVxuXG5jbGFzcyBDaGFpbnNTaW5nbGV0b24ge1xuICBwcml2YXRlIHJlYWRvbmx5IGNoYWluc0J5TmFtZTogQ2hhaW5zQnlOYW1lXG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQ6IGJvb2xlYW5cbiAgcHJpdmF0ZSByb290Q2hhaW46IHN0cmluZ1xuICBwdWJsaWMgcmVnaXN0cmF0b3I6IFJlZ2lzdHJhdG9yXG4gIHB1YmxpYyBwZXJzb25hbERhdGE6IFBlcnNvbmFsRGF0YVxuICBwdWJsaWMgdGV4dERlY29kZXI/OiB0eXBlb2YgVGV4dERlY29kZXJcbiAgcHVibGljIHRleHRFbmNvZGVyPzogdHlwZW9mIFRleHRFbmNvZGVyXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jaGFpbnNCeU5hbWUgPSB7fVxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZVxuICAgIHRoaXMucm9vdENoYWluID0gJ3Vua25vd24nXG4gICAgdGhpcy5yZWdpc3RyYXRvciA9IG5ldyBSZWdpc3RyYXRvcihudWxsKVxuICAgIHRoaXMucGVyc29uYWxEYXRhID0gbmV3IFBlcnNvbmFsRGF0YShudWxsKVxuICB9XG5cbiAgaW5pdChcbiAgICAgIGNvbmZpZzogQ29uZmlnLFxuICAgICAgYXV0aEtleVNlYXJjaENhbGxiYWNrPzogQXV0aEtleVNlYXJjaENhbGxiYWNrLFxuICAgICAgc2lnbmF0dXJlUHJvdmlkZXJNYWtlcj86IFNpZ25hdHVyZVByb3ZpZGVyTWFrZXIsXG4gICAgICBjaGFpbkNyeXB0PzogQ2hhaW5DcnlwdCxcbiAgICAgIHRleHREZWNvZGVyPzogdHlwZW9mIFRleHREZWNvZGVyLFxuICAgICAgdGV4dEVuY29kZXI/OiB0eXBlb2YgVGV4dEVuY29kZXIsXG4gICAgKSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMudGV4dERlY29kZXIgPSB0ZXh0RGVjb2RlclxuICAgIHRoaXMudGV4dEVuY29kZXIgPSB0ZXh0RW5jb2RlclxuXG4gICAgaWYgKGNvbmZpZy5wZXJzb25hbERhdGEpIHtcbiAgICAgIHRoaXMucGVyc29uYWxEYXRhLnNldENvbmZpZyhjb25maWcucGVyc29uYWxEYXRhKVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgY2hhaW4gb2YgY29uZmlnLmNoYWlucykge1xuICAgICAgdGhpcy5jaGFpbnNCeU5hbWVbY2hhaW4ubmFtZV0gPSBuZXcgQ2hhaW4oXG4gICAgICAgICAgY2hhaW4sXG4gICAgICAgICAgY29uZmlnLnRhYmxlQ29kZUNvbmZpZyxcbiAgICAgICAgICB0aGlzLnBlcnNvbmFsRGF0YSxcbiAgICAgICAgICBhdXRoS2V5U2VhcmNoQ2FsbGJhY2ssXG4gICAgICAgICAgc2lnbmF0dXJlUHJvdmlkZXJNYWtlcixcbiAgICAgICAgICBjaGFpbkNyeXB0LFxuICAgICAgICAgIHRoaXMudGV4dERlY29kZXIsXG4gICAgICAgICAgdGhpcy50ZXh0RW5jb2RlclxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMucm9vdENoYWluID0gY29uZmlnLnVhbC5yb290Q2hhaW5cbiAgICBpZiAoY29uZmlnLnJlZ2lzdHJhdG9yKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJhdG9yLnNldENvbmZpZyhjb25maWcucmVnaXN0cmF0b3IpXG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlXG4gIH1cblxuICBjaGVja0NoYWluc0lzSW5pdGlhbGl6ZWQoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aHJvdyBvbm8obmV3IENoYWluc0lzTm90SW5pdGlhbGl6ZWRFcnJvcignQ2hhaW5zIGlzIG5vdCBpbml0aWFsaXplZCcpKVxuICAgIH1cbiAgfVxuXG4gIGdldENoYWluQnlOYW1lKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuY2hlY2tDaGFpbnNJc0luaXRpYWxpemVkKClcblxuICAgIGNvbnN0IGNoYWluID0gdGhpcy5jaGFpbnNCeU5hbWVbbmFtZV1cblxuICAgIGlmICghY2hhaW4pIHtcbiAgICAgIHRocm93IG9ubyhuZXcgVW5rbm93bkNoYWluRXJyb3IoYENoYWluIFwiJHtuYW1lfVwiIG5vdCBmb3VuZGApKVxuICAgIH1cblxuICAgIHJldHVybiBjaGFpblxuICB9XG5cbiAgZ2V0Um9vdENoYWluKCkge1xuICAgIHJldHVybiB0aGlzLmdldENoYWluQnlOYW1lKHRoaXMucm9vdENoYWluKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYWluc1NpbmdsZXRvblxuIl19