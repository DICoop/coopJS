import BaseContract from './base';
class NftContract extends BaseContract {
    constructor(api, tableCodeConfig) {
        super(api, tableCodeConfig, 'nft');
    }
    async getObjectsByOwner(owner) {
        const q = {
            table: 'pieces',
            lower_bound: owner,
            upper_bound: owner,
            limit: 1000,
            index_position: 2,
            key_type: 'i64',
            getAllRows: true,
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getAllObjects() {
        const q = {
            table: 'objects',
            limit: 100,
            lower_bound: 0,
            getAllRows: true,
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getMarket() {
        const q = {
            table: 'market',
            limit: 1000,
            lower_bound: 0,
            getAllRows: true,
            parseMetaAsJson: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async fetchRequestsWithIndexPosition(username, indexPosition) {
        const q = {
            table: 'requests',
            lower_bound: username,
            upper_bound: username,
            limit: 1000,
            index_position: indexPosition,
            key_type: 'i64',
            parseKeysAsJson: ['delivery_to', 'meta'],
            getAllRows: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async fetchRequests(username) {
        const [asBuyer, asSeller] = await Promise.all([
            this.fetchRequestsWithIndexPosition(username, 2),
            this.fetchRequestsWithIndexPosition(username, 3),
        ]);
        return [...asBuyer, ...asSeller];
    }
}
export default NftContract;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmZ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvc3JjL2Jsb2NrY2hhaW4vY29udHJhY3RzL25mdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLFlBQTZCLE1BQU0sUUFBUSxDQUFBO0FBMkRsRCxNQUFNLFdBQVksU0FBUSxZQUFZO0lBQ3BDLFlBQVksR0FBWSxFQUFFLGVBQWdDO1FBQ3hELEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsS0FBa0I7UUFDeEMsTUFBTSxDQUFDLEdBQWtCO1lBQ3ZCLEtBQUssRUFBRSxRQUFRO1lBQ2YsV0FBVyxFQUFFLEtBQUs7WUFDbEIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsS0FBSyxFQUFFLElBQUk7WUFDWCxjQUFjLEVBQUUsQ0FBQztZQUNqQixRQUFRLEVBQUUsS0FBSztZQUNmLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUMzQixpQkFBaUIsRUFBRTtnQkFDakIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7YUFDakI7U0FDRixDQUFBO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBWSxDQUFDLENBQUMsQ0FBQTtRQUVwRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYTtRQUNqQixNQUFNLENBQUMsR0FBa0I7WUFDdkIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsS0FBSyxFQUFFLEdBQUc7WUFDVixXQUFXLEVBQUUsQ0FBQztZQUNkLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUMzQixpQkFBaUIsRUFBRTtnQkFDakIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7YUFDakI7U0FDRixDQUFBO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBWSxDQUFDLENBQUMsQ0FBQTtRQUVwRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUztRQUNiLE1BQU0sQ0FBQyxHQUFrQjtZQUN2QixLQUFLLEVBQUUsUUFBUTtZQUNmLEtBQUssRUFBRSxJQUFJO1lBQ1gsV0FBVyxFQUFFLENBQUM7WUFDZCxVQUFVLEVBQUUsSUFBSTtZQUNoQixlQUFlLEVBQUUsSUFBSTtTQUN0QixDQUFBO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBa0IsQ0FBQyxDQUFDLENBQUE7UUFFMUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLDhCQUE4QixDQUFDLFFBQXFCLEVBQUUsYUFBcUI7UUFDL0UsTUFBTSxDQUFDLEdBQWtCO1lBQ3ZCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLEtBQUssRUFBRSxJQUFJO1lBQ1gsY0FBYyxFQUFFLGFBQWE7WUFDN0IsUUFBUSxFQUFFLEtBQUs7WUFDZixlQUFlLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUE7UUFDRCxNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFtQixDQUFDLENBQUMsQ0FBQTtRQUUzRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQXFCO1FBQ3ZDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzVDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2pELENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLE9BQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDRjtBQUVELGVBQWUsV0FBVyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjb3VudE5hbWUgfSBmcm9tICcuLi8uLi9lb3MvdHlwZXMnXG5pbXBvcnQgUmVhZEFwaSBmcm9tICcuLi9yZWFkQXBpJ1xuaW1wb3J0IHsgVGFibGVDb2RlQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgQmFzZUNvbnRyYWN0LCB7VGFibGVSb3dzQXJnc30gZnJvbSAnLi9iYXNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE5mdE9iamVjdCB7XG4gIGNhdGVnb3J5OiBzdHJpbmdcbiAgY3JlYXRvcjogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgaWQ6IG51bWJlclxuICBpbWFnZXM6IHN0cmluZ1tdXG4gIGlwbnM6IHN0cmluZ1xuICBtZXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgdGl0bGU6IHN0cmluZ1xuICB0b3RhbF9waWVjZXM6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbGl2ZXJ5UmVxdWVzdCB7XG4gIHR5cGU6IHN0cmluZ1xuICBwbGFjZWhvbGRlcjogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIERlbGl2ZXJ5UmVxdWVzdEZpbGxlZCA9IERlbGl2ZXJ5UmVxdWVzdCAmIHtcbiAgdmFsdWU6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5mdE1hcmtldE9iamVjdCB7XG4gIGJhc2VfcGllY2VfcHJpY2U6IHN0cmluZ1xuICBibG9ja2VkX3BpZWNlczogbnVtYmVyXG4gIGRheV9maW5pc2g6IG51bWJlclxuICBkYXlfc3RhcnQ6IG51bWJlclxuICBpZDogbnVtYmVyXG4gIG1ldGE6IHtkZWxpdmVyeV9yZXF1ZXN0OiBEZWxpdmVyeVJlcXVlc3RbXX1cbiAgbWluX3BpZWNlX3ByaWNlOiBzdHJpbmdcbiAgb2JqZWN0X2lkOiBudW1iZXJcbiAgcmVtYWluX3BpZWNlczogbnVtYmVyXG4gIHNhbGVzX2Nsb3NlZF9hdDogc3RyaW5nXG4gIHNhbGVzX3N0YXJ0X2F0OiBzdHJpbmdcbiAgc2VsbGVyOiBzdHJpbmdcbiAgc3RhdHVzOiBcIndhaXRpbmdcIiB8IFwicGF1c2VcIiB8IFwiYWNjZXB0ZWRcIiB8IFwiY29uZmlybWVkXCIgfCBcImlzc3VlZFwiIHwgXCJkZWNsaW5lZFwiIHwgXCJjYW5jZWxsZWRcIlxuICB0b2tlbl9jb250cmFjdDogc3RyaW5nXG4gIHRvdGFsX3ByaWNlOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZnRNYXJrZXRSZXF1ZXN0IHtcbiAgaWQ6IG51bWJlclxuICBtYXJrZXRfaWQ6IG51bWJlclxuICBidXllcjogc3RyaW5nXG4gIHNlbGxlcjogc3RyaW5nXG4gIG1hbmFnZXI6IHN0cmluZ1xuICByZXF1ZXN0ZWRfcGllY2VzOiBudW1iZXJcbiAgdG90YWxfcHJpY2U6IHN0cmluZ1xuICBiYXNlX3BpZWNlX3ByaWNlOiBzdHJpbmdcbiAgb25lX3BpZWNlX3ByaWNlOiBzdHJpbmdcbiAgdG90YWxfcGF5ZWQ6IHN0cmluZ1xuICBzdGF0dXM6IFwid2FpdGluZ1wiIHwgXCJwYXllZFwiIHwgXCJhY2NlcHRlZFwiIHwgXCJkZWxpdmVyeVwiIHwgXCJmaW5pc2hcIlxuICBkYXlfc3RhcnQ6IG51bWJlclxuICBkYXlfZmluaXNoOiBudW1iZXJcbiAgZGVsaXZlcnlfdG86IERlbGl2ZXJ5UmVxdWVzdEZpbGxlZFtdXG4gIG1ldGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG59XG5cbmNsYXNzIE5mdENvbnRyYWN0IGV4dGVuZHMgQmFzZUNvbnRyYWN0IHtcbiAgY29uc3RydWN0b3IoYXBpOiBSZWFkQXBpLCB0YWJsZUNvZGVDb25maWc6IFRhYmxlQ29kZUNvbmZpZykge1xuICAgIHN1cGVyKGFwaSwgdGFibGVDb2RlQ29uZmlnLCAnbmZ0JylcbiAgfVxuXG4gIGFzeW5jIGdldE9iamVjdHNCeU93bmVyKG93bmVyOiBBY2NvdW50TmFtZSkge1xuICAgIGNvbnN0IHE6IFRhYmxlUm93c0FyZ3MgPSB7XG4gICAgICB0YWJsZTogJ3BpZWNlcycsXG4gICAgICBsb3dlcl9ib3VuZDogb3duZXIsXG4gICAgICB1cHBlcl9ib3VuZDogb3duZXIsXG4gICAgICBsaW1pdDogMTAwMCxcbiAgICAgIGluZGV4X3Bvc2l0aW9uOiAyLFxuICAgICAga2V5X3R5cGU6ICdpNjQnLFxuICAgICAgZ2V0QWxsUm93czogdHJ1ZSxcbiAgICAgIHBhcnNlTWV0YUFzSnNvbjogdHJ1ZSxcbiAgICAgIHBhcnNlS2V5c0FzSnNvbjogWydpbWFnZXMnXSxcbiAgICAgIGRlZmF1bHRKc29uVmFsdWVzOiB7XG4gICAgICAgIGltYWdlczogKCkgPT4gW10sXG4gICAgICB9LFxuICAgIH1cbiAgICBjb25zdCB7cm93c30gPSBhd2FpdCB0aGlzLmdldFRhYmxlUm93czxOZnRPYmplY3Q+KHEpXG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGFzeW5jIGdldEFsbE9iamVjdHMoKSB7XG4gICAgY29uc3QgcTogVGFibGVSb3dzQXJncyA9IHtcbiAgICAgIHRhYmxlOiAnb2JqZWN0cycsXG4gICAgICBsaW1pdDogMTAwLFxuICAgICAgbG93ZXJfYm91bmQ6IDAsXG4gICAgICBnZXRBbGxSb3dzOiB0cnVlLFxuICAgICAgcGFyc2VNZXRhQXNKc29uOiB0cnVlLFxuICAgICAgcGFyc2VLZXlzQXNKc29uOiBbJ2ltYWdlcyddLFxuICAgICAgZGVmYXVsdEpzb25WYWx1ZXM6IHtcbiAgICAgICAgaW1hZ2VzOiAoKSA9PiBbXSxcbiAgICAgIH0sXG4gICAgfVxuICAgIGNvbnN0IHtyb3dzfSA9IGF3YWl0IHRoaXMuZ2V0VGFibGVSb3dzPE5mdE9iamVjdD4ocSlcblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgYXN5bmMgZ2V0TWFya2V0KCkge1xuICAgIGNvbnN0IHE6IFRhYmxlUm93c0FyZ3MgPSB7XG4gICAgICB0YWJsZTogJ21hcmtldCcsXG4gICAgICBsaW1pdDogMTAwMCxcbiAgICAgIGxvd2VyX2JvdW5kOiAwLFxuICAgICAgZ2V0QWxsUm93czogdHJ1ZSxcbiAgICAgIHBhcnNlTWV0YUFzSnNvbjogdHJ1ZSxcbiAgICB9XG4gICAgY29uc3Qge3Jvd3N9ID0gYXdhaXQgdGhpcy5nZXRUYWJsZVJvd3M8TmZ0TWFya2V0T2JqZWN0PihxKVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBhc3luYyBmZXRjaFJlcXVlc3RzV2l0aEluZGV4UG9zaXRpb24odXNlcm5hbWU6IEFjY291bnROYW1lLCBpbmRleFBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICBjb25zdCBxOiBUYWJsZVJvd3NBcmdzID0ge1xuICAgICAgdGFibGU6ICdyZXF1ZXN0cycsXG4gICAgICBsb3dlcl9ib3VuZDogdXNlcm5hbWUsXG4gICAgICB1cHBlcl9ib3VuZDogdXNlcm5hbWUsXG4gICAgICBsaW1pdDogMTAwMCxcbiAgICAgIGluZGV4X3Bvc2l0aW9uOiBpbmRleFBvc2l0aW9uLFxuICAgICAga2V5X3R5cGU6ICdpNjQnLFxuICAgICAgcGFyc2VLZXlzQXNKc29uOiBbJ2RlbGl2ZXJ5X3RvJywgJ21ldGEnXSxcbiAgICAgIGdldEFsbFJvd3M6IHRydWUsXG4gICAgfVxuICAgIGNvbnN0IHtyb3dzfSA9IGF3YWl0IHRoaXMuZ2V0VGFibGVSb3dzPE5mdE1hcmtldFJlcXVlc3Q+KHEpXG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGFzeW5jIGZldGNoUmVxdWVzdHModXNlcm5hbWU6IEFjY291bnROYW1lKSB7XG4gICAgY29uc3QgW2FzQnV5ZXIsIGFzU2VsbGVyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHRoaXMuZmV0Y2hSZXF1ZXN0c1dpdGhJbmRleFBvc2l0aW9uKHVzZXJuYW1lLCAyKSxcbiAgICAgIHRoaXMuZmV0Y2hSZXF1ZXN0c1dpdGhJbmRleFBvc2l0aW9uKHVzZXJuYW1lLCAzKSxcbiAgICBdKTtcblxuICAgIHJldHVybiBbLi4uYXNCdXllciwgLi4uYXNTZWxsZXJdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5mdENvbnRyYWN0XG4iXX0=