import BaseContract from './base';
class NftContract extends BaseContract {
    constructor(api, tableCodeConfig) {
        super(api, tableCodeConfig, 'nft');
    }
    async getObjectsByOwner(owner) {
        const q = {
            table: 'pieces',
            lower_bound: owner,
            upper_bound: owner,
            limit: 1000,
            index_position: 2,
            key_type: 'i64',
            getAllRows: true,
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getAllObjects() {
        const q = {
            table: 'objects',
            limit: 100,
            lower_bound: 0,
            getAllRows: true,
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getObjectsById(id) {
        const q = {
            table: 'objects',
            limit: 1,
            lower_bound: id,
            upper_bound: id,
            index_position: 0,
            key_type: 'i64',
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getMarket() {
        const q = {
            table: 'market',
            limit: 1000,
            lower_bound: 0,
            getAllRows: true,
            parseMetaAsJson: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getMarketObjectsById(id) {
        const q = {
            table: 'market',
            limit: 1,
            lower_bound: id,
            upper_bound: id,
            index_position: 0,
            key_type: 'i64',
            parseMetaAsJson: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async fetchRequestsWithIndexPosition(username, indexPosition) {
        const q = {
            table: 'requests',
            lower_bound: username,
            upper_bound: username,
            limit: 1000,
            index_position: indexPosition,
            key_type: 'i64',
            parseKeysAsJson: ['delivery_to', 'meta'],
            getAllRows: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async fetchRequests(username) {
        const [asBuyer, asSeller] = await Promise.all([
            this.fetchRequestsWithIndexPosition(username, 2),
            this.fetchRequestsWithIndexPosition(username, 3),
        ]);
        return [...asBuyer, ...asSeller];
    }
}
export default NftContract;
//# sourceMappingURL=data:application/json;base64,