import BaseContract from './base';
class NftContract extends BaseContract {
    constructor(api, tableCodeConfig) {
        super(api, tableCodeConfig, 'nft');
    }
    async getObjectsByOwner(owner) {
        const q = {
            table: 'pieces',
            lower_bound: owner,
            upper_bound: owner,
            limit: 1000,
            index_position: 2,
            key_type: 'i64',
            getAllRows: true,
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getAllObjects() {
        const q = {
            table: 'objects',
            limit: 100,
            lower_bound: 0,
            getAllRows: true,
            parseMetaAsJson: true,
            parseKeysAsJson: ['images'],
            defaultJsonValues: {
                images: () => [],
            },
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async getMarket() {
        const q = {
            table: 'market',
            limit: 1000,
            lower_bound: 0,
            getAllRows: true,
            parseMetaAsJson: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async fetchRequestsWithIndexPosition(username, indexPosition) {
        const q = {
            table: 'requests',
            lower_bound: username,
            upper_bound: username,
            limit: 1000,
            index_position: indexPosition,
            key_type: 'i64',
            parseKeysAsJson: ['delivery_to', 'meta'],
            getAllRows: true,
        };
        const { rows } = await this.getTableRows(q);
        return rows;
    }
    async fetchRequests(username) {
        const [asBuyer, asSeller] = await Promise.all([
            this.fetchRequestsWithIndexPosition(username, 2),
            this.fetchRequestsWithIndexPosition(username, 3),
        ]);
        return [...asBuyer, ...asSeller];
    }
}
export default NftContract;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmZ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvc3JjL2Jsb2NrY2hhaW4vY29udHJhY3RzL25mdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLFlBQTZCLE1BQU0sUUFBUSxDQUFBO0FBMkRsRCxNQUFNLFdBQVksU0FBUSxZQUFZO0lBQ3BDLFlBQVksR0FBWSxFQUFFLGVBQWdDO1FBQ3hELEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsS0FBa0I7UUFDeEMsTUFBTSxDQUFDLEdBQWtCO1lBQ3ZCLEtBQUssRUFBRSxRQUFRO1lBQ2YsV0FBVyxFQUFFLEtBQUs7WUFDbEIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsS0FBSyxFQUFFLElBQUk7WUFDWCxjQUFjLEVBQUUsQ0FBQztZQUNqQixRQUFRLEVBQUUsS0FBSztZQUNmLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUMzQixpQkFBaUIsRUFBRTtnQkFDakIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7YUFDakI7U0FDRixDQUFBO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBWSxDQUFDLENBQUMsQ0FBQTtRQUVwRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYTtRQUNqQixNQUFNLENBQUMsR0FBa0I7WUFDdkIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsS0FBSyxFQUFFLEdBQUc7WUFDVixXQUFXLEVBQUUsQ0FBQztZQUNkLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQztZQUMzQixpQkFBaUIsRUFBRTtnQkFDakIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7YUFDakI7U0FDRixDQUFBO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBWSxDQUFDLENBQUMsQ0FBQTtRQUVwRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUztRQUNiLE1BQU0sQ0FBQyxHQUFrQjtZQUN2QixLQUFLLEVBQUUsUUFBUTtZQUNmLEtBQUssRUFBRSxJQUFJO1lBQ1gsV0FBVyxFQUFFLENBQUM7WUFDZCxVQUFVLEVBQUUsSUFBSTtZQUNoQixlQUFlLEVBQUUsSUFBSTtTQUN0QixDQUFBO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBa0IsQ0FBQyxDQUFDLENBQUE7UUFFMUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLDhCQUE4QixDQUFDLFFBQXFCLEVBQUUsYUFBcUI7UUFDL0UsTUFBTSxDQUFDLEdBQWtCO1lBQ3ZCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLEtBQUssRUFBRSxJQUFJO1lBQ1gsY0FBYyxFQUFFLGFBQWE7WUFDN0IsUUFBUSxFQUFFLEtBQUs7WUFDZixlQUFlLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUE7UUFDRCxNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFtQixDQUFDLENBQUMsQ0FBQTtRQUUzRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQXFCO1FBQ3ZDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzVDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2pELENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLE9BQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDRjtBQUVELGVBQWUsV0FBVyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjb3VudE5hbWUgfSBmcm9tICcuLi8uLi9lb3MvdHlwZXMnXG5pbXBvcnQgUmVhZEFwaSBmcm9tICcuLi9yZWFkQXBpJ1xuaW1wb3J0IHsgVGFibGVDb2RlQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgQmFzZUNvbnRyYWN0LCB7VGFibGVSb3dzQXJnc30gZnJvbSAnLi9iYXNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE5mdE9iamVjdCB7XG4gIGNhdGVnb3J5OiBzdHJpbmdcbiAgY3JlYXRvcjogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgaWQ6IG51bWJlclxuICBpbWFnZXM6IHN0cmluZ1tdXG4gIGlwbnM6IHN0cmluZ1xuICBtZXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgdGl0bGU6IHN0cmluZ1xuICB0b3RhbF9waWVjZXM6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbGl2ZXJ5UmVxdWVzdCB7XG4gIHR5cGU6IHN0cmluZ1xuICBwbGFjZWhvbGRlcjogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIERlbGl2ZXJ5UmVxdWVzdEZpbGxlZCA9IERlbGl2ZXJ5UmVxdWVzdCAmIHtcbiAgdmFsdWU6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5mdE1hcmtldE9iamVjdCB7XG4gIGJhc2VfcGllY2VfcHJpY2U6IHN0cmluZ1xuICBibG9ja2VkX3BpZWNlczogbnVtYmVyXG4gIGRheV9maW5pc2g6IG51bWJlclxuICBkYXlfc3RhcnQ6IG51bWJlclxuICBpZDogbnVtYmVyXG4gIG1ldGE6IHtkZWxpdmVyeV9yZXF1ZXN0OiBEZWxpdmVyeVJlcXVlc3RbXX1cbiAgbWluX3BpZWNlX3ByaWNlOiBzdHJpbmdcbiAgb2JqZWN0X2lkOiBudW1iZXJcbiAgcmVtYWluX3BpZWNlczogbnVtYmVyXG4gIHNhbGVzX2Nsb3NlZF9hdDogc3RyaW5nXG4gIHNhbGVzX3N0YXJ0X2F0OiBzdHJpbmdcbiAgc2VsbGVyOiBzdHJpbmdcbiAgc3RhdHVzOiBcIndhaXRpbmdcIiB8IFwicGF1c2VcIlxuICB0b2tlbl9jb250cmFjdDogc3RyaW5nXG4gIHRvdGFsX3ByaWNlOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZnRNYXJrZXRSZXF1ZXN0IHtcbiAgaWQ6IG51bWJlclxuICBtYXJrZXRfaWQ6IG51bWJlclxuICBidXllcjogc3RyaW5nXG4gIHNlbGxlcjogc3RyaW5nXG4gIG1hbmFnZXI6IHN0cmluZ1xuICByZXF1ZXN0ZWRfcGllY2VzOiBudW1iZXJcbiAgdG90YWxfcHJpY2U6IHN0cmluZ1xuICBiYXNlX3BpZWNlX3ByaWNlOiBzdHJpbmdcbiAgb25lX3BpZWNlX3ByaWNlOiBzdHJpbmdcbiAgdG90YWxfcGF5ZWQ6IHN0cmluZ1xuICBzdGF0dXM6IFwid2FpdGluZ1wiIHwgXCJhY2NlcHRlZFwiIHwgXCJjb25maXJtZWRcIiB8IFwiaXNzdWVkXCIgfCBcImRlY2xpbmVkXCIgfCBcImNhbmNlbGxlZFwiXG4gIGRheV9zdGFydDogbnVtYmVyXG4gIGRheV9maW5pc2g6IG51bWJlclxuICBkZWxpdmVyeV90bzogRGVsaXZlcnlSZXF1ZXN0RmlsbGVkW11cbiAgbWV0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbn1cblxuY2xhc3MgTmZ0Q29udHJhY3QgZXh0ZW5kcyBCYXNlQ29udHJhY3Qge1xuICBjb25zdHJ1Y3RvcihhcGk6IFJlYWRBcGksIHRhYmxlQ29kZUNvbmZpZzogVGFibGVDb2RlQ29uZmlnKSB7XG4gICAgc3VwZXIoYXBpLCB0YWJsZUNvZGVDb25maWcsICduZnQnKVxuICB9XG5cbiAgYXN5bmMgZ2V0T2JqZWN0c0J5T3duZXIob3duZXI6IEFjY291bnROYW1lKSB7XG4gICAgY29uc3QgcTogVGFibGVSb3dzQXJncyA9IHtcbiAgICAgIHRhYmxlOiAncGllY2VzJyxcbiAgICAgIGxvd2VyX2JvdW5kOiBvd25lcixcbiAgICAgIHVwcGVyX2JvdW5kOiBvd25lcixcbiAgICAgIGxpbWl0OiAxMDAwLFxuICAgICAgaW5kZXhfcG9zaXRpb246IDIsXG4gICAgICBrZXlfdHlwZTogJ2k2NCcsXG4gICAgICBnZXRBbGxSb3dzOiB0cnVlLFxuICAgICAgcGFyc2VNZXRhQXNKc29uOiB0cnVlLFxuICAgICAgcGFyc2VLZXlzQXNKc29uOiBbJ2ltYWdlcyddLFxuICAgICAgZGVmYXVsdEpzb25WYWx1ZXM6IHtcbiAgICAgICAgaW1hZ2VzOiAoKSA9PiBbXSxcbiAgICAgIH0sXG4gICAgfVxuICAgIGNvbnN0IHtyb3dzfSA9IGF3YWl0IHRoaXMuZ2V0VGFibGVSb3dzPE5mdE9iamVjdD4ocSlcblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgYXN5bmMgZ2V0QWxsT2JqZWN0cygpIHtcbiAgICBjb25zdCBxOiBUYWJsZVJvd3NBcmdzID0ge1xuICAgICAgdGFibGU6ICdvYmplY3RzJyxcbiAgICAgIGxpbWl0OiAxMDAsXG4gICAgICBsb3dlcl9ib3VuZDogMCxcbiAgICAgIGdldEFsbFJvd3M6IHRydWUsXG4gICAgICBwYXJzZU1ldGFBc0pzb246IHRydWUsXG4gICAgICBwYXJzZUtleXNBc0pzb246IFsnaW1hZ2VzJ10sXG4gICAgICBkZWZhdWx0SnNvblZhbHVlczoge1xuICAgICAgICBpbWFnZXM6ICgpID0+IFtdLFxuICAgICAgfSxcbiAgICB9XG4gICAgY29uc3Qge3Jvd3N9ID0gYXdhaXQgdGhpcy5nZXRUYWJsZVJvd3M8TmZ0T2JqZWN0PihxKVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBhc3luYyBnZXRNYXJrZXQoKSB7XG4gICAgY29uc3QgcTogVGFibGVSb3dzQXJncyA9IHtcbiAgICAgIHRhYmxlOiAnbWFya2V0JyxcbiAgICAgIGxpbWl0OiAxMDAwLFxuICAgICAgbG93ZXJfYm91bmQ6IDAsXG4gICAgICBnZXRBbGxSb3dzOiB0cnVlLFxuICAgICAgcGFyc2VNZXRhQXNKc29uOiB0cnVlLFxuICAgIH1cbiAgICBjb25zdCB7cm93c30gPSBhd2FpdCB0aGlzLmdldFRhYmxlUm93czxOZnRNYXJrZXRPYmplY3Q+KHEpXG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGFzeW5jIGZldGNoUmVxdWVzdHNXaXRoSW5kZXhQb3NpdGlvbih1c2VybmFtZTogQWNjb3VudE5hbWUsIGluZGV4UG9zaXRpb246IG51bWJlcikge1xuICAgIGNvbnN0IHE6IFRhYmxlUm93c0FyZ3MgPSB7XG4gICAgICB0YWJsZTogJ3JlcXVlc3RzJyxcbiAgICAgIGxvd2VyX2JvdW5kOiB1c2VybmFtZSxcbiAgICAgIHVwcGVyX2JvdW5kOiB1c2VybmFtZSxcbiAgICAgIGxpbWl0OiAxMDAwLFxuICAgICAgaW5kZXhfcG9zaXRpb246IGluZGV4UG9zaXRpb24sXG4gICAgICBrZXlfdHlwZTogJ2k2NCcsXG4gICAgICBwYXJzZUtleXNBc0pzb246IFsnZGVsaXZlcnlfdG8nLCAnbWV0YSddLFxuICAgICAgZ2V0QWxsUm93czogdHJ1ZSxcbiAgICB9XG4gICAgY29uc3Qge3Jvd3N9ID0gYXdhaXQgdGhpcy5nZXRUYWJsZVJvd3M8TmZ0TWFya2V0UmVxdWVzdD4ocSlcblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hSZXF1ZXN0cyh1c2VybmFtZTogQWNjb3VudE5hbWUpIHtcbiAgICBjb25zdCBbYXNCdXllciwgYXNTZWxsZXJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy5mZXRjaFJlcXVlc3RzV2l0aEluZGV4UG9zaXRpb24odXNlcm5hbWUsIDIpLFxuICAgICAgdGhpcy5mZXRjaFJlcXVlc3RzV2l0aEluZGV4UG9zaXRpb24odXNlcm5hbWUsIDMpLFxuICAgIF0pO1xuXG4gICAgcmV0dXJuIFsuLi5hc0J1eWVyLCAuLi5hc1NlbGxlcl07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmZ0Q29udHJhY3RcbiJdfQ==