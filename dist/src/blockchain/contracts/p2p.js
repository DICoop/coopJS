import BaseContract from './base';
class P2PContract extends BaseContract {
    constructor(api, tableCodeConfig) {
        super(api, tableCodeConfig, 'p2p');
    }
    async getOrders(username, parent_id, order_id) {
        const q = {
            table: 'orders',
            lower_bound: 0,
            limit: 100,
            getAllRows: true,
        };
        if (typeof username !== 'undefined') {
            q.lower_bound = username;
            q.upper_bound = username;
            q.index_position = 5;
            q.key_type = 'i64';
        }
        else if (typeof parent_id !== 'undefined') {
            q.lower_bound = parent_id;
            q.upper_bound = parent_id;
            q.index_position = 3;
            q.key_type = 'i64';
        }
        else if (typeof order_id !== 'undefined') {
            q.lower_bound = order_id;
            q.upper_bound = order_id;
        }
        const { rows } = await this.getTableRows(q);
        return rows.map(row => {
            const res = { ...row };
            try {
                res.details = JSON.parse(res.details);
                res.root_remain_float = parseFloat(res.root_remain);
            }
            catch (e) {
                res.details = { address: res.details };
            }
            return res;
        });
    }
    async getOrder(order_id) {
        const [order] = await this.getOrders(undefined, undefined, order_id);
        return order;
    }
    getUSDRates() {
        return this.getTableRows({
            table: 'usdrates',
            lower_bound: 0,
            limit: 100,
            getAllRows: true,
        }).then(result => result.rows);
    }
    getRateFromRates(rates, symbol, precision) {
        const filter = `${(0).toFixed(precision)} ${symbol}`;
        const rate = rates.find(el => el.out_asset === filter);
        return rate ? rate.rate : '0';
    }
    async getUsdRate(symbol, precision) {
        const rates = await this.getUSDRates();
        return this.getRateFromRates(rates, symbol, precision);
    }
}
export default P2PContract;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicDJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvc3JjL2Jsb2NrY2hhaW4vY29udHJhY3RzL3AycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFlBQTZCLE1BQU0sUUFBUSxDQUFBO0FBa0RsRCxNQUFNLFdBQVksU0FBUSxZQUFZO0lBQ3BDLFlBQVksR0FBWSxFQUFFLGVBQWdDO1FBQ3hELEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQWlCLEVBQUUsU0FBMkIsRUFBRSxRQUEwQjtRQUN4RixNQUFNLENBQUMsR0FBa0I7WUFDdkIsS0FBSyxFQUFFLFFBQVE7WUFDZixXQUFXLEVBQUUsQ0FBQztZQUNkLEtBQUssRUFBRSxHQUFHO1lBQ1YsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQTtRQUNELElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxFQUFFO1lBQ25DLENBQUMsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFBO1lBQ3hCLENBQUMsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFBO1lBQ3hCLENBQUMsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFBO1lBQ3BCLENBQUMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1NBQ25CO2FBQU0sSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLEVBQUU7WUFDM0MsQ0FBQyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUE7WUFDekIsQ0FBQyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUE7WUFDekIsQ0FBQyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUE7WUFDcEIsQ0FBQyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7U0FDbkI7YUFBTSxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtZQUMxQyxDQUFDLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQTtZQUN4QixDQUFDLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQTtTQUN6QjtRQUVELE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQWEsQ0FBQyxDQUFDLENBQUE7UUFFckQsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sR0FBRyxHQUFHLEVBQUMsR0FBRyxHQUFHLEVBQUMsQ0FBQTtZQUVwQixJQUFJO2dCQUNGLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ3JDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO2FBQ3BEO1lBQUMsT0FBTSxDQUFDLEVBQUM7Z0JBQ1IsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFDLENBQUE7YUFDckM7WUFFRCxPQUFPLEdBQUcsQ0FBQTtRQUNaLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBZ0I7UUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBRXBFLE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQWU7WUFDckMsS0FBSyxFQUFFLFVBQVU7WUFDakIsV0FBVyxFQUFFLENBQUM7WUFDZCxLQUFLLEVBQUUsR0FBRztZQUNWLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQXFCLEVBQUUsTUFBYyxFQUFFLFNBQWlCO1FBQ3ZFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxFQUFFLENBQUE7UUFFcEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUE7UUFFdEQsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQTtJQUMvQixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFjLEVBQUUsU0FBaUI7UUFDaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFFdEMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFdBQVcsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFkQXBpIGZyb20gJy4uL3JlYWRBcGknXG5pbXBvcnQgeyBUYWJsZUNvZGVDb25maWcgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCBCYXNlQ29udHJhY3QsIHtUYWJsZVJvd3NBcmdzfSBmcm9tICcuL2Jhc2UnXG5cbmludGVyZmFjZSBPcmRlcnNEYXRhIHtcbiAgY3JlYXRlZF9hdDogc3RyaW5nXG4gIGNyZWF0b3I6IHN0cmluZ1xuICBjdXJhdG9yOiBzdHJpbmdcbiAgZGV0YWlsczogYW55XG4gIGV4cGlyZWRfYXQ6IHN0cmluZ1xuICBpZDogbnVtYmVyXG4gIG91dF9jb21wbGV0ZWQ6IHN0cmluZ1xuICBvdXRfY29udHJhY3Q6IHN0cmluZ1xuICBvdXRfY3VycmVuY3lfY29kZTogbnVtYmVyXG4gIG91dF9sb2NrZWQ6IHN0cmluZ1xuICBvdXRfcHJlY2lzaW9uOiBudW1iZXJcbiAgb3V0X3F1YW50aXR5OiBzdHJpbmdcbiAgb3V0X3JhdGU6IHN0cmluZ1xuICBvdXRfcmVtYWluOiBzdHJpbmdcbiAgb3V0X3N5bWJvbDogc3RyaW5nXG4gIG91dF90eXBlOiBzdHJpbmdcbiAgcGFyZW50X2NyZWF0b3I6IHN0cmluZ1xuICBwYXJlbnRfaWQ6IG51bWJlclxuICBxdW90ZV9jb21wbGV0ZWQ6IHN0cmluZ1xuICBxdW90ZV9jb250cmFjdDogc3RyaW5nXG4gIHF1b3RlX2xvY2tlZDogc3RyaW5nXG4gIHF1b3RlX3ByZWNpc2lvbjogbnVtYmVyXG4gIHF1b3RlX3F1YW50aXR5OiBzdHJpbmdcbiAgcXVvdGVfcmF0ZTogc3RyaW5nXG4gIHF1b3RlX3JlbWFpbjogc3RyaW5nXG4gIHF1b3RlX3N5bWJvbDogc3RyaW5nXG4gIHF1b3RlX3R5cGU6IHN0cmluZ1xuICByb290X2NvbXBsZXRlZDogc3RyaW5nXG4gIHJvb3RfY29udHJhY3Q6IHN0cmluZ1xuICByb290X2xvY2tlZDogc3RyaW5nXG4gIHJvb3RfcHJlY2lzaW9uOiBudW1iZXJcbiAgcm9vdF9xdWFudGl0eTogc3RyaW5nXG4gIHJvb3RfcmVtYWluOiBzdHJpbmdcbiAgcm9vdF9yZW1haW5fZmxvYXQ/OiBudW1iZXJcbiAgcm9vdF9zeW1ib2w6IHN0cmluZ1xuICBzdGF0dXM6IHN0cmluZ1xuICB0eXBlOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFVzZFJhdGVzRGF0YSB7XG4gIGlkOiBudW1iZXJcbiAgb3V0X2Fzc2V0OiBzdHJpbmdcbiAgb3V0X2NvbnRyYWN0OiBzdHJpbmdcbiAgcmF0ZTogc3RyaW5nXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZ1xufVxuXG5jbGFzcyBQMlBDb250cmFjdCBleHRlbmRzIEJhc2VDb250cmFjdCB7XG4gIGNvbnN0cnVjdG9yKGFwaTogUmVhZEFwaSwgdGFibGVDb2RlQ29uZmlnOiBUYWJsZUNvZGVDb25maWcpIHtcbiAgICBzdXBlcihhcGksIHRhYmxlQ29kZUNvbmZpZywgJ3AycCcpXG4gIH1cblxuICBhc3luYyBnZXRPcmRlcnModXNlcm5hbWU/OiBzdHJpbmcsIHBhcmVudF9pZD86IG51bWJlciB8IHN0cmluZywgb3JkZXJfaWQ/OiBudW1iZXIgfCBzdHJpbmcpOiBQcm9taXNlPE9yZGVyc0RhdGFbXT4ge1xuICAgIGNvbnN0IHE6IFRhYmxlUm93c0FyZ3MgPSB7XG4gICAgICB0YWJsZTogJ29yZGVycycsXG4gICAgICBsb3dlcl9ib3VuZDogMCxcbiAgICAgIGxpbWl0OiAxMDAsXG4gICAgICBnZXRBbGxSb3dzOiB0cnVlLFxuICAgIH1cbiAgICBpZiAodHlwZW9mIHVzZXJuYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcS5sb3dlcl9ib3VuZCA9IHVzZXJuYW1lXG4gICAgICBxLnVwcGVyX2JvdW5kID0gdXNlcm5hbWVcbiAgICAgIHEuaW5kZXhfcG9zaXRpb24gPSA1XG4gICAgICBxLmtleV90eXBlID0gJ2k2NCdcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJlbnRfaWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBxLmxvd2VyX2JvdW5kID0gcGFyZW50X2lkXG4gICAgICBxLnVwcGVyX2JvdW5kID0gcGFyZW50X2lkXG4gICAgICBxLmluZGV4X3Bvc2l0aW9uID0gM1xuICAgICAgcS5rZXlfdHlwZSA9ICdpNjQnXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3JkZXJfaWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBxLmxvd2VyX2JvdW5kID0gb3JkZXJfaWRcbiAgICAgIHEudXBwZXJfYm91bmQgPSBvcmRlcl9pZFxuICAgIH1cblxuICAgIGNvbnN0IHtyb3dzfSA9IGF3YWl0IHRoaXMuZ2V0VGFibGVSb3dzPE9yZGVyc0RhdGE+KHEpXG5cbiAgICByZXR1cm4gcm93cy5tYXAocm93ID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IHsuLi5yb3d9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcy5kZXRhaWxzID0gSlNPTi5wYXJzZShyZXMuZGV0YWlscylcbiAgICAgICAgcmVzLnJvb3RfcmVtYWluX2Zsb2F0ID0gcGFyc2VGbG9hdChyZXMucm9vdF9yZW1haW4pXG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICByZXMuZGV0YWlscyA9IHthZGRyZXNzOiByZXMuZGV0YWlsc31cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc1xuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXRPcmRlcihvcmRlcl9pZDogbnVtYmVyKSB7XG4gICAgY29uc3QgW29yZGVyXSA9IGF3YWl0IHRoaXMuZ2V0T3JkZXJzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvcmRlcl9pZClcblxuICAgIHJldHVybiBvcmRlclxuICB9XG5cbiAgZ2V0VVNEUmF0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGFibGVSb3dzPFVzZFJhdGVzRGF0YT4oe1xuICAgICAgdGFibGU6ICd1c2RyYXRlcycsXG4gICAgICBsb3dlcl9ib3VuZDogMCxcbiAgICAgIGxpbWl0OiAxMDAsXG4gICAgICBnZXRBbGxSb3dzOiB0cnVlLFxuICAgIH0pLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5yb3dzKVxuICB9XG5cbiAgZ2V0UmF0ZUZyb21SYXRlcyhyYXRlczogVXNkUmF0ZXNEYXRhW10sIHN5bWJvbDogc3RyaW5nLCBwcmVjaXNpb246IG51bWJlcikge1xuICAgIGNvbnN0IGZpbHRlciA9IGAkeygwKS50b0ZpeGVkKHByZWNpc2lvbil9ICR7c3ltYm9sfWBcblxuICAgIGNvbnN0IHJhdGUgPSByYXRlcy5maW5kKGVsID0+IGVsLm91dF9hc3NldCA9PT0gZmlsdGVyKVxuXG4gICAgcmV0dXJuIHJhdGUgPyByYXRlLnJhdGUgOiAnMCdcbiAgfVxuXG4gIGFzeW5jIGdldFVzZFJhdGUoc3ltYm9sOiBzdHJpbmcsIHByZWNpc2lvbjogbnVtYmVyKSB7XG4gICAgY29uc3QgcmF0ZXMgPSBhd2FpdCB0aGlzLmdldFVTRFJhdGVzKClcblxuICAgIHJldHVybiB0aGlzLmdldFJhdGVGcm9tUmF0ZXMocmF0ZXMsIHN5bWJvbCwgcHJlY2lzaW9uKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFAyUENvbnRyYWN0XG4iXX0=