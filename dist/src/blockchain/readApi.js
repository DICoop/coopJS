import EosApi from 'eosjs-api';
import ono from '@jsdevtools/ono';
import { RpcEndpointsEmptyError } from './errors';
class ReadApi {
    constructor(chainName, apiConfigs, balancingMode) {
        this.getKeyAccounts = (...args) => {
            const instance = this.getInstance();
            return instance.getKeyAccounts(...args);
        };
        this.getAccount = (...args) => {
            const instance = this.getInstance();
            return instance.getAccount(...args);
        };
        this.getCurrencyBalance = (...args) => {
            const instance = this.getInstance();
            return instance.getCurrencyBalance(...args);
        };
        this.offset = 0;
        this.balancingMode = balancingMode || 'random-once';
        this.apis = [];
        this.endpoints = [];
        if (!apiConfigs || apiConfigs.length === 0) {
            throw ono(new RpcEndpointsEmptyError(`rpcEndpoints is empty (chain=${chainName})`));
        }
        for (const { protocol, host, port } of apiConfigs) {
            const rpcEndpointString = `${protocol}://${host}:${port}`;
            this.endpoints.push(rpcEndpointString);
            this.apis.push(new EosApi({ httpEndpoint: rpcEndpointString }));
        }
        if (this.balancingMode === 'random-once' && this.apis.length > 1) {
            this.offset = Math.floor(Math.random() * this.apis.length);
        }
    }
    getBalancedItemByOffset(currentOffset, items, balancingMode) {
        if (items.length < 2) {
            return {
                result: items[0],
                offset: 0,
            };
        }
        let nextOffset = currentOffset;
        if (balancingMode === 'random') {
            nextOffset = Math.floor(Math.random() * items.length);
        }
        const instance = items[nextOffset];
        if (balancingMode === 'round-robin') {
            nextOffset++;
            if (nextOffset >= items.length) {
                nextOffset = 0;
            }
        }
        return {
            result: instance,
            offset: nextOffset,
        };
    }
    getBalancedItem(collection) {
        const { result, offset, } = this.getBalancedItemByOffset(this.offset, collection, this.balancingMode);
        this.offset = offset;
        return result;
    }
    getInstance() {
        return this.getBalancedItem(this.apis);
    }
    getEndpoint() {
        return this.getBalancedItem(this.endpoints);
    }
    async getUserBalance(account, symbol) {
        const [balance] = await this.getCurrencyBalance("eosio.token", account, symbol);
        return `${(parseFloat(balance || '0') || 0).toFixed(4)} ${symbol}`;
    }
    async getPermissionKeyByName(accountName, name) {
        const account = await this.getAccount(accountName);
        const permission = account.permissions.find(el => el.perm_name === name);
        return permission?.required_auth.keys[0].key;
    }
    getTableRows(code, scope, table, table_key, lower_bound, upper_bound, limit, key_type, index_position) {
        const instance = this.getInstance();
        return instance.getTableRows(true, code, scope, table, table_key, lower_bound, upper_bound, limit, key_type, index_position);
    }
}
export default ReadApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzL3NyYy9ibG9ja2NoYWluL3JlYWRBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sV0FBVyxDQUFBO0FBQzlCLE9BQU8sR0FBRyxNQUFNLGlCQUFpQixDQUFBO0FBR2pDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQU9qRCxNQUFNLE9BQU87SUFNWCxZQUFZLFNBQWlCLEVBQUUsVUFBeUIsRUFBRSxhQUE2QjtRQXFFdkYsbUJBQWMsR0FBNkIsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO1lBQ3JELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUVuQyxPQUFPLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUN6QyxDQUFDLENBQUE7UUFFRCxlQUFVLEdBQXlCLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7WUFFbkMsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDckMsQ0FBQyxDQUFBO1FBRUQsdUJBQWtCLEdBQWlDLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUM3RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7WUFFbkMsT0FBTyxRQUFRLENBQUMsa0JBQWtCLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUM3QyxDQUFDLENBQUE7UUFwRkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDZixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsSUFBSSxhQUFhLENBQUE7UUFDbkQsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUE7UUFDZCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUs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SUFFRCxLQUFLLENBQUMsc0JBQXNCLENBQUMsV0FBbUIsRUFBRSxJQUFZO1FBQzVELE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQUE7UUFFeEUsT0FBTyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7SUFDOUMsQ0FBQztJQUVELFlBQVksQ0FDVixJQUFZLEVBQ1osS0FBYSxFQUNiLEtBQWEsRUFDYixTQUFrQixFQUNsQixXQUE2QixFQUM3QixXQUE2QixFQUM3QixLQUFjLEVBQ2QsUUFBaUIsRUFDakIsY0FBdUI7UUFFdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBRW5DLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FDMUIsSUFBSSxFQUNKLElBQUksRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsV0FBVyxFQUNYLEtBQUssRUFDTCxRQUFRLEVBQ1IsY0FBYyxDQUNmLENBQUE7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLE9BQU8sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFb3NBcGkgZnJvbSAnZW9zanMtYXBpJ1xuaW1wb3J0IG9ubyBmcm9tICdAanNkZXZ0b29scy9vbm8nXG5cbmltcG9ydCB7IFJwY0VuZHBvaW50LCBCYWxhbmNpbmdNb2RlIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IFJwY0VuZHBvaW50c0VtcHR5RXJyb3IgfSBmcm9tICcuL2Vycm9ycydcblxuaW50ZXJmYWNlIEJhbGFuY2luZ1Jlc3VsdDxUPiB7XG4gIHJlc3VsdDogVCxcbiAgb2Zmc2V0OiBudW1iZXIsXG59XG5cbmNsYXNzIFJlYWRBcGkge1xuICBwcml2YXRlIHJlYWRvbmx5IGJhbGFuY2luZ01vZGU6IEJhbGFuY2luZ01vZGVcbiAgcHJpdmF0ZSByZWFkb25seSBhcGlzOiBFb3NBcGlbXVxuICBwcml2YXRlIHJlYWRvbmx5IGVuZHBvaW50czogc3RyaW5nW11cbiAgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKGNoYWluTmFtZTogc3RyaW5nLCBhcGlDb25maWdzOiBScGNFbmRwb2ludFtdLCBiYWxhbmNpbmdNb2RlPzogQmFsYW5jaW5nTW9kZSkge1xuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMuYmFsYW5jaW5nTW9kZSA9IGJhbGFuY2luZ01vZGUgfHwgJ3JhbmRvbS1vbmNlJ1xuICAgIHRoaXMuYXBpcyA9IFtdXG4gICAgdGhpcy5lbmRwb2ludHMgPSBbXVxuXG4gICAgaWYgKCFhcGlDb25maWdzIHx8IGFwaUNvbmZpZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBvbm8obmV3IFJwY0VuZHBvaW50c0VtcHR5RXJyb3IoYHJwY0VuZHBvaW50cyBpcyBlbXB0eSAoY2hhaW49JHtjaGFpbk5hbWV9KWApKVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgeyBwcm90b2NvbCwgaG9zdCwgcG9ydCB9IG9mIGFwaUNvbmZpZ3MpIHtcbiAgICAgIGNvbnN0IHJwY0VuZHBvaW50U3RyaW5nID0gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fToke3BvcnR9YFxuICAgICAgdGhpcy5lbmRwb2ludHMucHVzaChycGNFbmRwb2ludFN0cmluZylcbiAgICAgIHRoaXMuYXBpcy5wdXNoKG5ldyBFb3NBcGkoeyBodHRwRW5kcG9pbnQ6IHJwY0VuZHBvaW50U3RyaW5nIH0pKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmJhbGFuY2luZ01vZGUgPT09ICdyYW5kb20tb25jZScgJiYgdGhpcy5hcGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMub2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5hcGlzLmxlbmd0aClcbiAgICB9XG4gIH1cblxuICBnZXRCYWxhbmNlZEl0ZW1CeU9mZnNldDxUPihjdXJyZW50T2Zmc2V0OiBudW1iZXIsIGl0ZW1zOiBUW10sIGJhbGFuY2luZ01vZGU6IEJhbGFuY2luZ01vZGUpOiBCYWxhbmNpbmdSZXN1bHQ8VD4ge1xuICAgIGlmIChpdGVtcy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IGl0ZW1zWzBdLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IG5leHRPZmZzZXQgPSBjdXJyZW50T2Zmc2V0XG4gICAgaWYgKGJhbGFuY2luZ01vZGUgPT09ICdyYW5kb20nKSB7XG4gICAgICBuZXh0T2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaXRlbXMubGVuZ3RoKVxuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlID0gaXRlbXNbbmV4dE9mZnNldF1cblxuICAgIGlmIChiYWxhbmNpbmdNb2RlID09PSAncm91bmQtcm9iaW4nKSB7XG4gICAgICBuZXh0T2Zmc2V0KytcblxuICAgICAgaWYgKG5leHRPZmZzZXQgPj0gaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRPZmZzZXQgPSAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdDogaW5zdGFuY2UsXG4gICAgICBvZmZzZXQ6IG5leHRPZmZzZXQsXG4gICAgfVxuICB9XG5cbiAgZ2V0QmFsYW5jZWRJdGVtPFQ+KGNvbGxlY3Rpb246IFRbXSk6IFQge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc3VsdCxcbiAgICAgIG9mZnNldCxcbiAgICB9ID0gdGhpcy5nZXRCYWxhbmNlZEl0ZW1CeU9mZnNldDxUPih0aGlzLm9mZnNldCwgY29sbGVjdGlvbiwgdGhpcy5iYWxhbmNpbmdNb2RlKVxuXG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXRcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGdldEluc3RhbmNlKCk6IEVvc0FwaSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmFsYW5jZWRJdGVtPEVvc0FwaT4odGhpcy5hcGlzKVxuICB9XG5cbiAgZ2V0RW5kcG9pbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCYWxhbmNlZEl0ZW08c3RyaW5nPih0aGlzLmVuZHBvaW50cylcbiAgfVxuXG4gIGdldEtleUFjY291bnRzOiBFb3NBcGlbJ2dldEtleUFjY291bnRzJ10gPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZSgpXG5cbiAgICByZXR1cm4gaW5zdGFuY2UuZ2V0S2V5QWNjb3VudHMoLi4uYXJncylcbiAgfVxuXG4gIGdldEFjY291bnQ6IEVvc0FwaVsnZ2V0QWNjb3VudCddID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKVxuXG4gICAgcmV0dXJuIGluc3RhbmNlLmdldEFjY291bnQoLi4uYXJncylcbiAgfVxuXG4gIGdldEN1cnJlbmN5QmFsYW5jZTogRW9zQXBpWydnZXRDdXJyZW5jeUJhbGFuY2UnXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKClcblxuICAgIHJldHVybiBpbnN0YW5jZS5nZXRDdXJyZW5jeUJhbGFuY2UoLi4uYXJncylcbiAgfVxuXG4gIGFzeW5jIGdldFVzZXJCYWxhbmNlKGFjY291bnQ6IHN0cmluZywgc3ltYm9sOiBzdHJpbmcpIHtcbiAgICBjb25zdCBbYmFsYW5jZV0gPSBhd2FpdCB0aGlzLmdldEN1cnJlbmN5QmFsYW5jZShcImVvc2lvLnRva2VuXCIsIGFjY291bnQsIHN5bWJvbClcblxuICAgIHJldHVybiBgJHsocGFyc2VGbG9hdChiYWxhbmNlIHx8ICcwJykgfHwgMCkudG9GaXhlZCg0KX0gJHtzeW1ib2x9YFxuICB9XG5cbiAgYXN5bmMgZ2V0UGVybWlzc2lvbktleUJ5TmFtZShhY2NvdW50TmFtZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBhY2NvdW50ID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50KGFjY291bnROYW1lKTtcbiAgICBjb25zdCBwZXJtaXNzaW9uID0gYWNjb3VudC5wZXJtaXNzaW9ucy5maW5kKGVsID0+IGVsLnBlcm1fbmFtZSA9PT0gbmFtZSlcblxuICAgIHJldHVybiBwZXJtaXNzaW9uPy5yZXF1aXJlZF9hdXRoLmtleXNbMF0ua2V5XG4gIH1cblxuICBnZXRUYWJsZVJvd3M8Um93VHlwZT4oXG4gICAgY29kZTogc3RyaW5nLFxuICAgIHNjb3BlOiBzdHJpbmcsXG4gICAgdGFibGU6IHN0cmluZyxcbiAgICB0YWJsZV9rZXk/OiBzdHJpbmcsXG4gICAgbG93ZXJfYm91bmQ/OiBudW1iZXIgfCBzdHJpbmcsXG4gICAgdXBwZXJfYm91bmQ/OiBudW1iZXIgfCBzdHJpbmcsXG4gICAgbGltaXQ/OiBudW1iZXIsXG4gICAga2V5X3R5cGU/OiBzdHJpbmcsXG4gICAgaW5kZXhfcG9zaXRpb24/OiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKClcblxuICAgIHJldHVybiBpbnN0YW5jZS5nZXRUYWJsZVJvd3M8Um93VHlwZT4oXG4gICAgICB0cnVlLFxuICAgICAgY29kZSxcbiAgICAgIHNjb3BlLFxuICAgICAgdGFibGUsXG4gICAgICB0YWJsZV9rZXksXG4gICAgICBsb3dlcl9ib3VuZCxcbiAgICAgIHVwcGVyX2JvdW5kLFxuICAgICAgbGltaXQsXG4gICAgICBrZXlfdHlwZSxcbiAgICAgIGluZGV4X3Bvc2l0aW9uXG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWRBcGlcbiJdfQ==