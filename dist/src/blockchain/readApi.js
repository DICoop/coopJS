import EosApi from 'eosjs-api';
import ono from '@jsdevtools/ono';
import { RpcEndpointsEmptyError } from './errors';
class ReadApi {
    constructor(chainName, apiConfigs, balancingMode) {
        this.getKeyAccounts = (...args) => {
            const instance = this.getInstance();
            return instance.getKeyAccounts(...args);
        };
        this.getAccount = (...args) => {
            const instance = this.getInstance();
            return instance.getAccount(...args);
        };
        this.getAbi = (...args) => {
            const instance = this.getInstance();
            return instance.getAbi(...args);
        };
        this.getCurrencyBalance = (...args) => {
            const instance = this.getInstance();
            return instance.getCurrencyBalance(...args);
        };
        this.offset = 0;
        this.balancingMode = balancingMode || 'random-once';
        this.apis = [];
        this.endpoints = [];
        if (!apiConfigs || apiConfigs.length === 0) {
            throw ono(new RpcEndpointsEmptyError(`rpcEndpoints is empty (chain=${chainName})`));
        }
        for (const { protocol, host, port } of apiConfigs) {
            const rpcEndpointString = `${protocol}://${host}:${port}`;
            this.endpoints.push(rpcEndpointString);
            this.apis.push(new EosApi({ httpEndpoint: rpcEndpointString }));
        }
        if (this.balancingMode === 'random-once' && this.apis.length > 1) {
            this.offset = Math.floor(Math.random() * this.apis.length);
        }
    }
    getBalancedItemByOffset(currentOffset, items, balancingMode) {
        if (items.length < 2) {
            return {
                result: items[0],
                offset: 0,
            };
        }
        let nextOffset = currentOffset;
        if (balancingMode === 'random') {
            nextOffset = Math.floor(Math.random() * items.length);
        }
        const instance = items[nextOffset];
        if (balancingMode === 'round-robin') {
            nextOffset++;
            if (nextOffset >= items.length) {
                nextOffset = 0;
            }
        }
        return {
            result: instance,
            offset: nextOffset,
        };
    }
    getBalancedItem(collection) {
        const { result, offset, } = this.getBalancedItemByOffset(this.offset, collection, this.balancingMode);
        this.offset = offset;
        return result;
    }
    getInstance() {
        return this.getBalancedItem(this.apis);
    }
    getEndpoint() {
        return this.getBalancedItem(this.endpoints);
    }
    async getUserBalance(account, symbol) {
        const [balance] = await this.getCurrencyBalance("eosio.token", account, symbol);
        return `${(parseFloat(balance || '0') || 0).toFixed(4)} ${symbol}`;
    }
    async getPermissionKeyByName(accountName, name) {
        const account = await this.getAccount(accountName);
        const permission = account.permissions.find(el => el.perm_name === name);
        return permission?.required_auth.keys[0].key;
    }
    async getInfo(accountName, name) {
        const account = await this.getAccount(accountName);
        const permission = account.permissions.find(el => el.perm_name === name);
        return permission?.required_auth.keys[0].key;
    }
    getTableRows(code, scope, table, table_key, lower_bound, upper_bound, limit, key_type, index_position) {
        const instance = this.getInstance();
        return instance.getTableRows(true, code, scope, table, table_key, lower_bound, upper_bound, limit, key_type, index_position);
    }
}
export default ReadApi;
//# sourceMappingURL=data:application/json;base64,