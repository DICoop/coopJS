import { TextDecoder, TextEncoder } from 'text-encoding';
import { Api, JsonRpc } from 'eosjs';
import { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig';
import fetch from 'isomorphic-fetch';
import ono from "@jsdevtools/ono";
import btoa from 'btoa';
import atob from 'atob';
import unescape from 'core-js-pure/stable/unescape';
import escape from 'core-js-pure/stable/escape';
import EosioContract from './contracts/eosio';
import CoreContract from './contracts/core';
import PartnersContract from './contracts/partners';
import P2PContract from './contracts/p2p';
import NftContract from './contracts/nft';
import ReadApi from './readApi';
import { NotImplementedError } from './errors';
import BaseCrypt from "./baseCrypt";
import Wallet from "./wallet";
import Explorer from "./explorer";
const JsSignatureProviderMaker = ((wif) => Promise.resolve(new JsSignatureProvider([wif])));
class Chain {
    constructor(chainConfig, tableCodeConfig, authKeySearchCallback, signatureProviderMaker, chainCrypt, textDecoder, textEncoder) {
        this.name = chainConfig.name;
        this.tableCodeConfig = { ...tableCodeConfig, ...(chainConfig.tableCodeConfigOverride || {}) };
        this.readApi = new ReadApi(this.name, chainConfig.rpcEndpoints, chainConfig.balancingMode);
        this.explorer = new Explorer(chainConfig.explorerApiUrl);
        this.rpcByEndpoint = {};
        this.authKeyType = chainConfig.authKeyType || 'plain-auth-key';
        this.authKeySearchCallback = authKeySearchCallback;
        this.signatureProviderMaker = signatureProviderMaker || JsSignatureProviderMaker;
        this.chainCrypt = chainCrypt || new BaseCrypt();
        this.textDecoder = textDecoder;
        this.textEncoder = textEncoder;
        this.coreSymbol = chainConfig.coreSymbol;
        this.eosioContract = this.applyContract(EosioContract);
        this.coreContract = this.applyContract(CoreContract);
        this.partnersContract = this.applyContract(PartnersContract);
        this.p2pContract = this.applyContract(P2PContract);
        this.nftContract = this.applyContract(NftContract);
        this.wallets = (chainConfig.wallets || []).map(walletConfig => new Wallet(walletConfig, this.readApi));
    }
    get walletsSymbols() {
        return this.wallets.map(wallet => wallet.symbol);
    }
    getWalletBySymbol(symbol) {
        return this.wallets.find(wallet => wallet.symbol === symbol);
    }
    applyContract(contract) {
        return new contract(this.readApi, this.tableCodeConfig);
    }
    getCachedRpc() {
        const endpoint = this.readApi.getEndpoint();
        if (!this.rpcByEndpoint[endpoint]) {
            this.rpcByEndpoint[endpoint] = new JsonRpc(endpoint, { fetch });
        }
        return this.rpcByEndpoint[endpoint];
    }
    getEosInstanceBySignatureProvider(signatureProvider) {
        const rpc = this.getCachedRpc();
        return new Api({
            rpc,
            signatureProvider,
            // @ts-ignore
            textDecoder: new (this.textDecoder || TextDecoder)(),
            textEncoder: new (this.textEncoder || TextEncoder)(),
        });
    }
    /**
     * @deprecated since version 1.0.2
     */
    getEosPassInstance(wif) {
        const signatureProvider = new JsSignatureProvider([wif]);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    async makeEosInstance(authKey) {
        const signatureProvider = await this.signatureProviderMaker(authKey);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    getAuthKey(authKeyQuery, authKeyType) {
        const localAuthKeyType = authKeyType || this.authKeyType;
        if (localAuthKeyType === 'plain-auth-key') {
            return authKeyQuery;
        }
        if (localAuthKeyType === 'auth-key-search-callback') {
            if (!this.authKeySearchCallback) {
                throw ono(new Error('For authKeyType=wif-search-callback wifSearchCallback need to define'));
            }
            return this.authKeySearchCallback(authKeyQuery);
        }
        throw ono(new NotImplementedError('Not implemented authKeyType'));
    }
    async transactByAuthKey(authKey, transaction, config) {
        const eos = await this.makeEosInstance(authKey);
        return eos.transact(transaction, config);
    }
    async transact(authKeyQuery, transaction, config, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        return this.transactByAuthKey(authKey, transaction, config);
    }
    async encryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        const permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "active");
        if (!permissionKey) {
            throw ono(new Error('permissionKey cannot be empty'));
        }
        const preparedMessage = btoa(unescape(encodeURIComponent(message)));
        return this.chainCrypt.encrypt(authKey, permissionKey, preparedMessage, memo);
    }
    async decryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        let permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "gateway");
        if (!permissionKey) {
            permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "active");
        }
        if (!permissionKey) {
            throw ono(new Error('permissionKey cannot be empty'));
        }
        const decryptedMessage = await this.chainCrypt.decrypt(authKey, permissionKey, message, memo);
        return decodeURIComponent(escape(atob(decryptedMessage)));
    }
}
export default Chain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy9zcmMvYmxvY2tjaGFpbi9jaGFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsR0FBRyxFQUFFLE9BQU8sRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUNuQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUczRCxPQUFPLEtBQUssTUFBTSxrQkFBa0IsQ0FBQTtBQUNwQyxPQUFPLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQztBQUNsQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sUUFBUSxNQUFNLDhCQUE4QixDQUFBO0FBQ25ELE9BQU8sTUFBTSxNQUFNLDRCQUE0QixDQUFBO0FBRS9DLE9BQU8sYUFBYSxNQUFNLG1CQUFtQixDQUFBO0FBQzdDLE9BQU8sWUFBWSxNQUFNLGtCQUFrQixDQUFBO0FBQzNDLE9BQU8sZ0JBQWdCLE1BQU0sc0JBQXNCLENBQUE7QUFDbkQsT0FBTyxXQUFXLE1BQU0saUJBQWlCLENBQUE7QUFDekMsT0FBTyxXQUFXLE1BQU0saUJBQWlCLENBQUE7QUFTekMsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFBO0FBRS9CLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUM3QyxPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sUUFBUSxNQUFNLFlBQVksQ0FBQztBQU1sQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxD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SUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFFN0YsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNELENBQUM7Q0FDRjtBQUVELGVBQWUsS0FBSyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXh0RGVjb2RlciwgVGV4dEVuY29kZXJ9IGZyb20gJ3RleHQtZW5jb2RpbmcnO1xuaW1wb3J0IHtBcGksIEpzb25ScGN9IGZyb20gJ2Vvc2pzJztcbmltcG9ydCB7SnNTaWduYXR1cmVQcm92aWRlcn0gZnJvbSAnZW9zanMvZGlzdC9lb3Nqcy1qc3NpZyc7XG5pbXBvcnQge1NpZ25hdHVyZVByb3ZpZGVyLCBUcmFuc2FjdENvbmZpZywgVHJhbnNhY3Rpb24sIFRyYW5zYWN0UmVzdWx0fSBmcm9tICdlb3Nqcy9kaXN0L2Vvc2pzLWFwaS1pbnRlcmZhY2VzJztcbmltcG9ydCB7UHVzaFRyYW5zYWN0aW9uQXJncywgUmVhZE9ubHlUcmFuc2FjdFJlc3VsdH0gZnJvbSAnZW9zanMvZGlzdC9lb3Nqcy1ycGMtaW50ZXJmYWNlcyc7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy1mZXRjaCdcbmltcG9ydCBvbm8gZnJvbSBcIkBqc2RldnRvb2xzL29ub1wiO1xuaW1wb3J0IGJ0b2EgZnJvbSAnYnRvYSc7XG5pbXBvcnQgYXRvYiBmcm9tICdhdG9iJztcbmltcG9ydCB1bmVzY2FwZSBmcm9tICdjb3JlLWpzLXB1cmUvc3RhYmxlL3VuZXNjYXBlJ1xuaW1wb3J0IGVzY2FwZSBmcm9tICdjb3JlLWpzLXB1cmUvc3RhYmxlL2VzY2FwZSdcblxuaW1wb3J0IEVvc2lvQ29udHJhY3QgZnJvbSAnLi9jb250cmFjdHMvZW9zaW8nXG5pbXBvcnQgQ29yZUNvbnRyYWN0IGZyb20gJy4vY29udHJhY3RzL2NvcmUnXG5pbXBvcnQgUGFydG5lcnNDb250cmFjdCBmcm9tICcuL2NvbnRyYWN0cy9wYXJ0bmVycydcbmltcG9ydCBQMlBDb250cmFjdCBmcm9tICcuL2NvbnRyYWN0cy9wMnAnXG5pbXBvcnQgTmZ0Q29udHJhY3QgZnJvbSAnLi9jb250cmFjdHMvbmZ0J1xuaW1wb3J0IHtcbiAgQXV0aEtleVNlYXJjaENhbGxiYWNrLFxuICBBdXRoS2V5VHlwZSxcbiAgQ2hhaW5Db25maWcsXG4gIENoYWluQ3J5cHQsXG4gIFNpZ25hdHVyZVByb3ZpZGVyTWFrZXIsXG4gIFRhYmxlQ29kZUNvbmZpZ1xufSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IFJlYWRBcGkgZnJvbSAnLi9yZWFkQXBpJ1xuaW1wb3J0IEJhc2VDb250cmFjdCBmcm9tIFwiLi9jb250cmFjdHMvYmFzZVwiO1xuaW1wb3J0IHtOb3RJbXBsZW1lbnRlZEVycm9yfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgQmFzZUNyeXB0IGZyb20gXCIuL2Jhc2VDcnlwdFwiO1xuaW1wb3J0IFdhbGxldCBmcm9tIFwiLi93YWxsZXRcIjtcbmltcG9ydCBFeHBsb3JlciBmcm9tIFwiLi9leHBsb3JlclwiO1xuXG5pbnRlcmZhY2UgUnBjc0J5RW5kcG9pbnRzIHtcbiAgW2tleTogc3RyaW5nXTogSnNvblJwY1xufVxuXG5jb25zdCBKc1NpZ25hdHVyZVByb3ZpZGVyTWFrZXIgPSAoKHdpZjogc3RyaW5nKSA9PiBQcm9taXNlLnJlc29sdmUobmV3IEpzU2lnbmF0dXJlUHJvdmlkZXIoW3dpZl0pKSlcblxuY2xhc3MgQ2hhaW4ge1xuICBwcml2YXRlIHJlYWRvbmx5IG5hbWU6IHN0cmluZ1xuICBwdWJsaWMgcmVhZEFwaTogUmVhZEFwaVxuICBwdWJsaWMgZXhwbG9yZXI6IEV4cGxvcmVyXG4gIHByaXZhdGUgcmVhZG9ubHkgdGFibGVDb2RlQ29uZmlnOiBUYWJsZUNvZGVDb25maWdcbiAgcHJpdmF0ZSByZWFkb25seSBycGNCeUVuZHBvaW50OiBScGNzQnlFbmRwb2ludHNcbiAgcHJpdmF0ZSByZWFkb25seSBhdXRoS2V5VHlwZTogQXV0aEtleVR5cGVcbiAgcHJpdmF0ZSByZWFkb25seSBhdXRoS2V5U2VhcmNoQ2FsbGJhY2s/OiBBdXRoS2V5U2VhcmNoQ2FsbGJhY2tcbiAgcHJpdmF0ZSByZWFkb25seSBzaWduYXR1cmVQcm92aWRlck1ha2VyOiBTaWduYXR1cmVQcm92aWRlck1ha2VyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2hhaW5DcnlwdDogQ2hhaW5DcnlwdFxuICBwcml2YXRlIHRleHREZWNvZGVyPzogdHlwZW9mIFRleHREZWNvZGVyXG4gIHByaXZhdGUgdGV4dEVuY29kZXI/OiB0eXBlb2YgVGV4dEVuY29kZXJcblxuICBwdWJsaWMgZW9zaW9Db250cmFjdDogRW9zaW9Db250cmFjdFxuICBwdWJsaWMgY29yZUNvbnRyYWN0OiBDb3JlQ29udHJhY3RcbiAgcHVibGljIHBhcnRuZXJzQ29udHJhY3Q6IFBhcnRuZXJzQ29udHJhY3RcbiAgcHVibGljIHAycENvbnRyYWN0OiBQMlBDb250cmFjdFxuICBwdWJsaWMgbmZ0Q29udHJhY3Q6IE5mdENvbnRyYWN0XG5cbiAgcHVibGljIHdhbGxldHM6IFdhbGxldFtdXG4gIHB1YmxpYyByZWFkb25seSBjb3JlU3ltYm9sPzogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBjaGFpbkNvbmZpZzogQ2hhaW5Db25maWcsXG4gICAgICB0YWJsZUNvZGVDb25maWc6IFRhYmxlQ29kZUNvbmZpZyxcbiAgICAgIGF1dGhLZXlTZWFyY2hDYWxsYmFjaz86IEF1dGhLZXlTZWFyY2hDYWxsYmFjayxcbiAgICAgIHNpZ25hdHVyZVByb3ZpZGVyTWFrZXI/OiBTaWduYXR1cmVQcm92aWRlck1ha2VyLFxuICAgICAgY2hhaW5DcnlwdD86IENoYWluQ3J5cHQsXG4gICAgICB0ZXh0RGVjb2Rlcj86IHR5cGVvZiBUZXh0RGVjb2RlcixcbiAgICAgIHRleHRFbmNvZGVyPzogdHlwZW9mIFRleHRFbmNvZGVyLFxuICApIHtcbiAgICB0aGlzLm5hbWUgPSBjaGFpbkNvbmZpZy5uYW1lXG4gICAgdGhpcy50YWJsZUNvZGVDb25maWcgPSB7IC4uLnRhYmxlQ29kZUNvbmZpZywgLi4uKGNoYWluQ29uZmlnLnRhYmxlQ29kZUNvbmZpZ092ZXJyaWRlIHx8IHt9KSB9XG4gICAgdGhpcy5yZWFkQXBpID0gbmV3IFJlYWRBcGkodGhpcy5uYW1lLCBjaGFpbkNvbmZpZy5ycGNFbmRwb2ludHMsIGNoYWluQ29uZmlnLmJhbGFuY2luZ01vZGUpXG4gICAgdGhpcy5leHBsb3JlciA9IG5ldyBFeHBsb3JlcihjaGFpbkNvbmZpZy5leHBsb3JlckFwaVVybClcbiAgICB0aGlzLnJwY0J5RW5kcG9pbnQgPSB7fVxuICAgIHRoaXMuYXV0aEtleVR5cGUgPSBjaGFpbkNvbmZpZy5hdXRoS2V5VHlwZSB8fCAncGxhaW4tYXV0aC1rZXknXG4gICAgdGhpcy5hdXRoS2V5U2VhcmNoQ2FsbGJhY2sgPSBhdXRoS2V5U2VhcmNoQ2FsbGJhY2tcbiAgICB0aGlzLnNpZ25hdHVyZVByb3ZpZGVyTWFrZXIgPSBzaWduYXR1cmVQcm92aWRlck1ha2VyIHx8IEpzU2lnbmF0dXJlUHJvdmlkZXJNYWtlclxuICAgIHRoaXMuY2hhaW5DcnlwdCA9IGNoYWluQ3J5cHQgfHwgbmV3IEJhc2VDcnlwdCgpXG4gICAgdGhpcy50ZXh0RGVjb2RlciA9IHRleHREZWNvZGVyXG4gICAgdGhpcy50ZXh0RW5jb2RlciA9IHRleHRFbmNvZGVyXG4gICAgdGhpcy5jb3JlU3ltYm9sID0gY2hhaW5Db25maWcuY29yZVN5bWJvbFxuXG4gICAgdGhpcy5lb3Npb0NvbnRyYWN0ID0gdGhpcy5hcHBseUNvbnRyYWN0KEVvc2lvQ29udHJhY3QpXG4gICAgdGhpcy5jb3JlQ29udHJhY3QgPSB0aGlzLmFwcGx5Q29udHJhY3QoQ29yZUNvbnRyYWN0KVxuICAgIHRoaXMucGFydG5lcnNDb250cmFjdCA9IHRoaXMuYXBwbHlDb250cmFjdChQYXJ0bmVyc0NvbnRyYWN0KVxuICAgIHRoaXMucDJwQ29udHJhY3QgPSB0aGlzLmFwcGx5Q29udHJhY3QoUDJQQ29udHJhY3QpXG4gICAgdGhpcy5uZnRDb250cmFjdCA9IHRoaXMuYXBwbHlDb250cmFjdChOZnRDb250cmFjdClcblxuICAgIHRoaXMud2FsbGV0cyA9IChjaGFpbkNvbmZpZy53YWxsZXRzIHx8IFtdKS5tYXAod2FsbGV0Q29uZmlnID0+IG5ldyBXYWxsZXQod2FsbGV0Q29uZmlnLCB0aGlzLnJlYWRBcGkpKVxuICB9XG5cbiAgZ2V0IHdhbGxldHNTeW1ib2xzKCkge1xuICAgIHJldHVybiB0aGlzLndhbGxldHMubWFwKHdhbGxldCA9PiB3YWxsZXQuc3ltYm9sKVxuICB9XG5cbiAgZ2V0V2FsbGV0QnlTeW1ib2woc3ltYm9sOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy53YWxsZXRzLmZpbmQod2FsbGV0ID0+IHdhbGxldC5zeW1ib2wgPT09IHN5bWJvbClcbiAgfVxuXG4gIGFwcGx5Q29udHJhY3Q8VCBleHRlbmRzIEJhc2VDb250cmFjdD4oY29udHJhY3Q6IHsgbmV3KC4uLmFyZ3M6IGFueVtdKTogVCA7fSk6IFQge1xuICAgIHJldHVybiBuZXcgY29udHJhY3QodGhpcy5yZWFkQXBpLCB0aGlzLnRhYmxlQ29kZUNvbmZpZylcbiAgfVxuXG4gIGdldENhY2hlZFJwYygpIHtcbiAgICBjb25zdCBlbmRwb2ludCA9IHRoaXMucmVhZEFwaS5nZXRFbmRwb2ludCgpXG4gICAgaWYgKCF0aGlzLnJwY0J5RW5kcG9pbnRbZW5kcG9pbnRdKSB7XG4gICAgICB0aGlzLnJwY0J5RW5kcG9pbnRbZW5kcG9pbnRdID0gbmV3IEpzb25ScGMoZW5kcG9pbnQsIHtmZXRjaH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJwY0J5RW5kcG9pbnRbZW5kcG9pbnRdXG4gIH1cblxuICBnZXRFb3NJbnN0YW5jZUJ5U2lnbmF0dXJlUHJvdmlkZXIoc2lnbmF0dXJlUHJvdmlkZXI6IFNpZ25hdHVyZVByb3ZpZGVyKSB7XG4gICAgY29uc3QgcnBjID0gdGhpcy5nZXRDYWNoZWRScGMoKVxuXG4gICAgcmV0dXJuIG5ldyBBcGkoe1xuICAgICAgcnBjLFxuICAgICAgc2lnbmF0dXJlUHJvdmlkZXIsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0ZXh0RGVjb2RlcjogbmV3ICh0aGlzLnRleHREZWNvZGVyIHx8IFRleHREZWNvZGVyKSgpLFxuICAgICAgdGV4dEVuY29kZXI6IG5ldyAodGhpcy50ZXh0RW5jb2RlciB8fCBUZXh0RW5jb2RlcikoKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMC4yXG4gICAqL1xuICBnZXRFb3NQYXNzSW5zdGFuY2Uod2lmOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzaWduYXR1cmVQcm92aWRlciA9IG5ldyBKc1NpZ25hdHVyZVByb3ZpZGVyKFt3aWZdKTtcbiAgICByZXR1cm4gdGhpcy5nZXRFb3NJbnN0YW5jZUJ5U2lnbmF0dXJlUHJvdmlkZXIoc2lnbmF0dXJlUHJvdmlkZXIpO1xuICB9XG5cbiAgYXN5bmMgbWFrZUVvc0luc3RhbmNlKGF1dGhLZXk6IHN0cmluZykge1xuICAgIGNvbnN0IHNpZ25hdHVyZVByb3ZpZGVyID0gYXdhaXQgdGhpcy5zaWduYXR1cmVQcm92aWRlck1ha2VyKGF1dGhLZXkpXG4gICAgcmV0dXJuIHRoaXMuZ2V0RW9zSW5zdGFuY2VCeVNpZ25hdHVyZVByb3ZpZGVyKHNpZ25hdHVyZVByb3ZpZGVyKTtcbiAgfVxuXG4gIGdldEF1dGhLZXkoYXV0aEtleVF1ZXJ5OiBzdHJpbmcsIGF1dGhLZXlUeXBlPzogQXV0aEtleVR5cGUpIHtcbiAgICBjb25zdCBsb2NhbEF1dGhLZXlUeXBlID0gYXV0aEtleVR5cGUgfHwgdGhpcy5hdXRoS2V5VHlwZVxuXG4gICAgaWYgKGxvY2FsQXV0aEtleVR5cGUgPT09ICdwbGFpbi1hdXRoLWtleScpIHtcbiAgICAgIHJldHVybiBhdXRoS2V5UXVlcnlcbiAgICB9XG5cbiAgICBpZiAobG9jYWxBdXRoS2V5VHlwZSA9PT0gJ2F1dGgta2V5LXNlYXJjaC1jYWxsYmFjaycpIHtcbiAgICAgIGlmICghdGhpcy5hdXRoS2V5U2VhcmNoQ2FsbGJhY2spIHtcbiAgICAgICAgdGhyb3cgb25vKG5ldyBFcnJvcignRm9yIGF1dGhLZXlUeXBlPXdpZi1zZWFyY2gtY2FsbGJhY2sgd2lmU2VhcmNoQ2FsbGJhY2sgbmVlZCB0byBkZWZpbmUnKSlcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmF1dGhLZXlTZWFyY2hDYWxsYmFjayhhdXRoS2V5UXVlcnkpXG4gICAgfVxuXG4gICAgdGhyb3cgb25vKG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgYXV0aEtleVR5cGUnKSlcbiAgfVxuXG4gIGFzeW5jIHRyYW5zYWN0QnlBdXRoS2V5KFxuICAgICAgYXV0aEtleTogc3RyaW5nLFxuICAgICAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLFxuICAgICAgY29uZmlnPzogVHJhbnNhY3RDb25maWdcbiAgKTogUHJvbWlzZTxUcmFuc2FjdFJlc3VsdCB8IFJlYWRPbmx5VHJhbnNhY3RSZXN1bHQgfCBQdXNoVHJhbnNhY3Rpb25BcmdzPiB7XG4gICAgY29uc3QgZW9zID0gYXdhaXQgdGhpcy5tYWtlRW9zSW5zdGFuY2UoYXV0aEtleSlcbiAgICByZXR1cm4gZW9zLnRyYW5zYWN0KHRyYW5zYWN0aW9uLCBjb25maWcpXG4gIH1cblxuICBhc3luYyB0cmFuc2FjdChcbiAgICAgIGF1dGhLZXlRdWVyeTogc3RyaW5nLFxuICAgICAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLFxuICAgICAgY29uZmlnPzogVHJhbnNhY3RDb25maWcsXG4gICAgICBhdXRoS2V5VHlwZT86IEF1dGhLZXlUeXBlLFxuICApOiBQcm9taXNlPFRyYW5zYWN0UmVzdWx0IHwgUmVhZE9ubHlUcmFuc2FjdFJlc3VsdCB8IFB1c2hUcmFuc2FjdGlvbkFyZ3M+IHtcbiAgICBjb25zdCBhdXRoS2V5ID0gYXdhaXQgdGhpcy5nZXRBdXRoS2V5KGF1dGhLZXlRdWVyeSwgYXV0aEtleVR5cGUpXG5cbiAgICBpZiAoIWF1dGhLZXkpIHtcbiAgICAgIHRocm93IG9ubyhuZXcgRXJyb3IoJ2F1dGhLZXkgY2Fubm90IGJlIGVtcHR5JykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3RCeUF1dGhLZXkoYXV0aEtleSwgdHJhbnNhY3Rpb24sIGNvbmZpZylcbiAgfVxuXG4gIGFzeW5jIGVuY3J5cHRNZXNzYWdlKFxuICAgICAgYXV0aEtleVF1ZXJ5OiBzdHJpbmcsXG4gICAgICBwdWJsaWNLZXk6IHN0cmluZyxcbiAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgIG1lbW8/OiBzdHJpbmcsXG4gICAgICBhdXRoS2V5VHlwZT86IEF1dGhLZXlUeXBlLFxuICApIHtcbiAgICBjb25zdCBhdXRoS2V5ID0gYXdhaXQgdGhpcy5nZXRBdXRoS2V5KGF1dGhLZXlRdWVyeSwgYXV0aEtleVR5cGUpXG5cbiAgICBpZiAoIWF1dGhLZXkpIHtcbiAgICAgIHRocm93IG9ubyhuZXcgRXJyb3IoJ2F1dGhLZXkgY2Fubm90IGJlIGVtcHR5JykpXG4gICAgfVxuXG4gICAgY29uc3QgcGVybWlzc2lvbktleSA9IGF3YWl0IHRoaXMucmVhZEFwaS5nZXRQZXJtaXNzaW9uS2V5QnlOYW1lKHB1YmxpY0tleSwgXCJhY3RpdmVcIilcblxuICAgIGlmICghcGVybWlzc2lvbktleSkge1xuICAgICAgdGhyb3cgb25vKG5ldyBFcnJvcigncGVybWlzc2lvbktleSBjYW5ub3QgYmUgZW1wdHknKSlcbiAgICB9XG5cbiAgICBjb25zdCBwcmVwYXJlZE1lc3NhZ2UgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChtZXNzYWdlKSkpXG4gICAgcmV0dXJuIHRoaXMuY2hhaW5DcnlwdC5lbmNyeXB0KGF1dGhLZXksIHBlcm1pc3Npb25LZXksIHByZXBhcmVkTWVzc2FnZSwgbWVtbylcbiAgfVxuXG4gIGFzeW5jIGRlY3J5cHRNZXNzYWdlKFxuICAgICAgYXV0aEtleVF1ZXJ5OiBzdHJpbmcsXG4gICAgICBwdWJsaWNLZXk6IHN0cmluZyxcbiAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgIG1lbW8/OiBzdHJpbmcsXG4gICAgICBhdXRoS2V5VHlwZT86IEF1dGhLZXlUeXBlLFxuICApIHtcbiAgICBjb25zdCBhdXRoS2V5ID0gYXdhaXQgdGhpcy5nZXRBdXRoS2V5KGF1dGhLZXlRdWVyeSwgYXV0aEtleVR5cGUpXG5cbiAgICBpZiAoIWF1dGhLZXkpIHtcbiAgICAgIHRocm93IG9ubyhuZXcgRXJyb3IoJ2F1dGhLZXkgY2Fubm90IGJlIGVtcHR5JykpXG4gICAgfVxuXG4gICAgbGV0IHBlcm1pc3Npb25LZXkgPSBhd2FpdCB0aGlzLnJlYWRBcGkuZ2V0UGVybWlzc2lvbktleUJ5TmFtZShwdWJsaWNLZXksIFwiZ2F0ZXdheVwiKVxuXG4gICAgaWYgKCFwZXJtaXNzaW9uS2V5KSB7XG4gICAgICBwZXJtaXNzaW9uS2V5ID0gYXdhaXQgdGhpcy5yZWFkQXBpLmdldFBlcm1pc3Npb25LZXlCeU5hbWUocHVibGljS2V5LCBcImFjdGl2ZVwiKVxuICAgIH1cblxuICAgIGlmICghcGVybWlzc2lvbktleSkge1xuICAgICAgdGhyb3cgb25vKG5ldyBFcnJvcigncGVybWlzc2lvbktleSBjYW5ub3QgYmUgZW1wdHknKSlcbiAgICB9XG5cbiAgICBjb25zdCBkZWNyeXB0ZWRNZXNzYWdlID0gYXdhaXQgdGhpcy5jaGFpbkNyeXB0LmRlY3J5cHQoYXV0aEtleSwgcGVybWlzc2lvbktleSwgbWVzc2FnZSwgbWVtbylcblxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGF0b2IoZGVjcnlwdGVkTWVzc2FnZSkpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYWluXG4iXX0=