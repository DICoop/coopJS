import { TextDecoder, TextEncoder } from 'text-encoding';
import { Api, JsonRpc } from 'eosjs';
import { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig';
import fetch from 'isomorphic-fetch';
import ono from "@jsdevtools/ono";
import btoa from 'btoa';
import atob from 'atob';
import unescape from 'core-js-pure/stable/unescape';
import escape from 'core-js-pure/stable/escape';
import EosioContract from './contracts/eosio';
import CoreContract from './contracts/core';
import PartnersContract from './contracts/partners';
import P2PContract from './contracts/p2p';
import NftContract from './contracts/nft';
import ReadApi from './readApi';
import { NotImplementedError } from './errors';
import BaseCrypt from "./baseCrypt";
import Wallet from "./wallet";
const JsSignatureProviderMaker = ((wif) => Promise.resolve(new JsSignatureProvider([wif])));
class Chain {
    constructor(chainConfig, tableCodeConfig, authKeySearchCallback, signatureProviderMaker, chainCrypt, textDecoder, textEncoder) {
        this.name = chainConfig.name;
        this.tableCodeConfig = { ...tableCodeConfig, ...(chainConfig.tableCodeConfigOverride || {}) };
        this.readApi = new ReadApi(this.name, chainConfig.rpcEndpoints, chainConfig.balancingMode);
        this.rpcByEndpoint = {};
        this.authKeyType = chainConfig.authKeyType || 'plain-auth-key';
        this.authKeySearchCallback = authKeySearchCallback;
        this.signatureProviderMaker = signatureProviderMaker || JsSignatureProviderMaker;
        this.chainCrypt = chainCrypt || new BaseCrypt();
        this.textDecoder = textDecoder;
        this.textEncoder = textEncoder;
        this.coreSymbol = chainConfig.coreSymbol;
        this.eosioContract = this.applyContract(EosioContract);
        this.coreContract = this.applyContract(CoreContract);
        this.partnersContract = this.applyContract(PartnersContract);
        this.p2pContract = this.applyContract(P2PContract);
        this.nftContract = this.applyContract(NftContract);
        this.wallets = (chainConfig.wallets || []).map(walletConfig => new Wallet(walletConfig, this.readApi));
    }
    get walletsSymbols() {
        return this.wallets.map(wallet => wallet.symbol);
    }
    getWalletBySymbol(symbol) {
        return this.wallets.find(wallet => wallet.symbol === symbol);
    }
    applyContract(contract) {
        return new contract(this.readApi, this.tableCodeConfig);
    }
    getCachedRpc() {
        const endpoint = this.readApi.getEndpoint();
        if (!this.rpcByEndpoint[endpoint]) {
            this.rpcByEndpoint[endpoint] = new JsonRpc(endpoint, { fetch });
        }
        return this.rpcByEndpoint[endpoint];
    }
    getEosInstanceBySignatureProvider(signatureProvider) {
        const rpc = this.getCachedRpc();
        return new Api({
            rpc,
            signatureProvider,
            // @ts-ignore
            textDecoder: new (this.textDecoder || TextDecoder)(),
            textEncoder: new (this.textEncoder || TextEncoder)(),
        });
    }
    /**
     * @deprecated since version 1.0.2
     */
    getEosPassInstance(wif) {
        const signatureProvider = new JsSignatureProvider([wif]);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    async makeEosInstance(authKey) {
        const signatureProvider = await this.signatureProviderMaker(authKey);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    getAuthKey(authKeyQuery, authKeyType) {
        const localAuthKeyType = authKeyType || this.authKeyType;
        if (localAuthKeyType === 'plain-auth-key') {
            return authKeyQuery;
        }
        if (localAuthKeyType === 'auth-key-search-callback') {
            if (!this.authKeySearchCallback) {
                throw ono(new Error('For authKeyType=wif-search-callback wifSearchCallback need to define'));
            }
            return this.authKeySearchCallback(authKeyQuery);
        }
        throw ono(new NotImplementedError('Not implemented authKeyType'));
    }
    async transactByAuthKey(authKey, transaction, config) {
        const eos = await this.makeEosInstance(authKey);
        return eos.transact(transaction, config);
    }
    async transact(authKeyQuery, transaction, config, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        return this.transactByAuthKey(authKey, transaction, config);
    }
    async encryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        const permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "active");
        if (!permissionKey) {
            throw ono(new Error('permissionKey cannot be empty'));
        }
        const preparedMessage = btoa(unescape(encodeURIComponent(message)));
        return this.chainCrypt.encrypt(authKey, permissionKey, preparedMessage, memo);
    }
    async decryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        let permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "gateway");
        if (!permissionKey) {
            permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "active");
        }
        if (!permissionKey) {
            throw ono(new Error('permissionKey cannot be empty'));
        }
        const decryptedMessage = await this.chainCrypt.decrypt(authKey, permissionKey, message, memo);
        return decodeURIComponent(escape(atob(decryptedMessage)));
    }
}
export default Chain;
//# sourceMappingURL=data:application/json;base64,