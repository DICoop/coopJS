import { TextDecoder, TextEncoder } from 'text-encoding';
import { Api, JsonRpc } from 'eosjs';
import { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig';
import fetch from 'isomorphic-fetch';
import ono from "@jsdevtools/ono";
import btoa from 'btoa';
import atob from 'atob';
import unescape from 'core-js-pure/stable/unescape';
import escape from 'core-js-pure/stable/escape';
import EosioContract from './contracts/eosio';
import CoreContract from './contracts/core';
import PartnersContract from './contracts/partners';
import P2PContract from './contracts/p2p';
import NftContract from './contracts/nft';
import ReadApi from './readApi';
import { NotImplementedError } from './errors';
import BaseCrypt from "./baseCrypt";
import Wallet from "./wallet";
import Explorer from "./explorer";
const JsSignatureProviderMaker = ((wif) => Promise.resolve(new JsSignatureProvider([wif])));
class Chain {
    constructor(chainConfig, tableCodeConfig, personalData, authKeySearchCallback, signatureProviderMaker, chainCrypt, textDecoder, textEncoder) {
        this.name = chainConfig.name;
        this.tableCodeConfig = { ...tableCodeConfig, ...(chainConfig.tableCodeConfigOverride || {}) };
        this.readApi = new ReadApi(this.name, chainConfig.rpcEndpoints, chainConfig.balancingMode);
        this.explorer = new Explorer(chainConfig.explorerApiUrl);
        this.rpcByEndpoint = {};
        this.authKeyType = chainConfig.authKeyType || 'plain-auth-key';
        this.authKeySearchCallback = authKeySearchCallback;
        this.signatureProviderMaker = signatureProviderMaker || JsSignatureProviderMaker;
        this.chainCrypt = chainCrypt || new BaseCrypt();
        this.textDecoder = textDecoder;
        this.textEncoder = textEncoder;
        this.coreSymbol = chainConfig.coreSymbol;
        this.personalData = personalData;
        this.eosioContract = this.applyContract(EosioContract);
        this.coreContract = this.applyContract(CoreContract);
        this.partnersContract = this.applyContract(PartnersContract);
        this.p2pContract = this.applyContract(P2PContract);
        this.nftContract = this.applyContract(NftContract);
        this.wallets = (chainConfig.wallets || []).map(walletConfig => new Wallet(walletConfig, this.readApi));
    }
    get walletsSymbols() {
        return this.wallets.map(wallet => wallet.symbol);
    }
    getWalletBySymbol(symbol) {
        return this.wallets.find(wallet => wallet.symbol === symbol);
    }
    applyContract(contract) {
        return new contract(this.readApi, this.tableCodeConfig);
    }
    getCachedRpc() {
        const endpoint = this.readApi.getEndpoint();
        if (!this.rpcByEndpoint[endpoint]) {
            this.rpcByEndpoint[endpoint] = new JsonRpc(endpoint, { fetch });
        }
        return this.rpcByEndpoint[endpoint];
    }
    getEosInstanceBySignatureProvider(signatureProvider) {
        const rpc = this.getCachedRpc();
        return new Api({
            rpc,
            signatureProvider,
            // @ts-ignore
            textDecoder: new (this.textDecoder || TextDecoder)(),
            textEncoder: new (this.textEncoder || TextEncoder)(),
        });
    }
    /**
     * @deprecated since version 1.0.2
     */
    getEosPassInstance(wif) {
        const signatureProvider = new JsSignatureProvider([wif]);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    async makeEosInstance(authKey) {
        const signatureProvider = await this.signatureProviderMaker(authKey);
        return this.getEosInstanceBySignatureProvider(signatureProvider);
    }
    getAuthKey(authKeyQuery, authKeyType) {
        const localAuthKeyType = authKeyType || this.authKeyType;
        if (localAuthKeyType === 'plain-auth-key') {
            return authKeyQuery;
        }
        if (localAuthKeyType === 'auth-key-search-callback') {
            if (!this.authKeySearchCallback) {
                throw ono(new Error('For authKeyType=wif-search-callback wifSearchCallback need to define'));
            }
            return this.authKeySearchCallback(authKeyQuery);
        }
        throw ono(new NotImplementedError('Not implemented authKeyType'));
    }
    async transactByAuthKey(authKey, transaction, config) {
        const eos = await this.makeEosInstance(authKey);
        return eos.transact(transaction, config);
    }
    async transact(authKeyQuery, transaction, config, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        return this.transactByAuthKey(authKey, transaction, config);
    }
    async encryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        const permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "active");
        if (!permissionKey) {
            throw ono(new Error('permissionKey cannot be empty'));
        }
        const preparedMessage = btoa(unescape(encodeURIComponent(message)));
        return this.chainCrypt.encrypt(authKey, permissionKey, preparedMessage, memo);
    }
    async decryptMessage(authKeyQuery, publicKey, message, memo, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        let permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "gateway");
        if (!permissionKey) {
            permissionKey = await this.readApi.getPermissionKeyByName(publicKey, "active");
        }
        if (!permissionKey) {
            throw ono(new Error('permissionKey cannot be empty'));
        }
        const decryptedMessage = await this.chainCrypt.decrypt(authKey, permissionKey, message, memo);
        return decodeURIComponent(escape(atob(decryptedMessage)));
    }
    makeValueAsStr(value) {
        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value === null || value === undefined) {
            return String(value);
        }
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                return value.map(item => this.makeValueAsStr(item)).join(',');
            }
            const keys = Object.keys(value).sort();
            return keys.map(key => `${key}=${this.makeValueAsStr(value[key])}`).join('&');
        }
        throw ono(new Error('Unsupported value type'));
    }
    objToStableMessage(dict) {
        return this.makeValueAsStr(dict);
    }
    btoaEscape(str) {
        return btoa(unescape(encodeURIComponent(str)));
    }
    async signMessage(authKeyQuery, publicKey, message, authKeyType) {
        const authKey = await this.getAuthKey(authKeyQuery, authKeyType);
        if (!authKey) {
            throw ono(new Error('authKey cannot be empty'));
        }
        const preparedMessage = this.btoaEscape(message);
        return this.chainCrypt.sign(authKey, preparedMessage);
    }
    async verifyMessage(publicKey, message, signature) {
        const preparedMessage = this.btoaEscape(message);
        return this.chainCrypt.verify(publicKey, preparedMessage, signature);
    }
    async signObject(authKeyQuery, publicKey, dict, authKeyType) {
        const message = this.objToStableMessage(dict);
        return this.signMessage(authKeyQuery, publicKey, message, authKeyType);
    }
    async verifyObject(publicKey, dict, signature) {
        const message = this.objToStableMessage(dict);
        return this.verifyMessage(publicKey, message, signature);
    }
    async sendPersonalData(authKeyQuery, senderAccountName, recipientAccountName, data, authKeyType) {
        const senderPub = await this.readApi.getPermissionKeyByName(senderAccountName, "active");
        const recipientPub = await this.readApi.getPermissionKeyByName(recipientAccountName, "active");
        if (!senderPub || !recipientPub) {
            throw ono(new Error('senderPub or recipientPub cannot be empty'));
        }
        const jsonMessage = JSON.stringify(data);
        const encryptedToSender = await this.encryptMessage(authKeyQuery, senderPub, jsonMessage, undefined, authKeyType);
        const encryptedToRecipient = await this.encryptMessage(authKeyQuery, recipientPub, jsonMessage, undefined, authKeyType);
        const dataBundle = {
            senderPub,
            recipientPub,
            senderData: encryptedToSender,
            recipientData: encryptedToRecipient,
        };
        const signature = await this.signObject(authKeyQuery, senderPub, dataBundle, authKeyType);
        return this.personalData.sendPersonalData(dataBundle, signature);
    }
    async getPersonalAsRecipient(authKeyQuery, recipientAccountName, ids, authKeyType) {
        const recipientPub = await this.readApi.getPermissionKeyByName(recipientAccountName, "active");
        if (!recipientPub) {
            throw ono(new Error('recipientPub cannot be empty'));
        }
        const dataBundle = {
            recipientPub,
            ids,
        };
        const signature = await this.signObject(authKeyQuery, recipientPub, dataBundle, authKeyType);
        return this.personalData.getPersonalDataAsRecipient(dataBundle, signature);
    }
    async getPersonalAsSender(authKeyQuery, senderAccountName, ids, authKeyType) {
        const senderPub = await this.readApi.getPermissionKeyByName(senderAccountName, "active");
        if (!senderPub) {
            throw ono(new Error('senderPub cannot be empty'));
        }
        const dataBundle = {
            senderPub,
            ids,
        };
        const signature = await this.signObject(authKeyQuery, senderPub, dataBundle, authKeyType);
        return this.personalData.getPersonalDataAsSender(dataBundle, signature);
    }
}
export default Chain;
//# sourceMappingURL=data:application/json;base64,